// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HandshakeTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "HandshakeTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Handshake.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace remote_msgs {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_HandshakeRequest_type_identifier(
        TypeIdentifierPair& type_ids_HandshakeRequest)
{

    ReturnCode_t return_code_HandshakeRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_HandshakeRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "remote_msgs::HandshakeRequest", type_ids_HandshakeRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_HandshakeRequest)
    {
        StructTypeFlag struct_flags_HandshakeRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_HandshakeRequest = "remote_msgs::HandshakeRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_HandshakeRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_HandshakeRequest;
        AppliedAnnotationSeq tmp_ann_custom_HandshakeRequest;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_HandshakeRequest;
        if (!tmp_ann_custom_HandshakeRequest.empty())
        {
            ann_custom_HandshakeRequest = tmp_ann_custom_HandshakeRequest;
        }

        CompleteTypeDetail detail_HandshakeRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_HandshakeRequest, ann_custom_HandshakeRequest, type_name_HandshakeRequest.to_string());
        CompleteStructHeader header_HandshakeRequest;
        header_HandshakeRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_HandshakeRequest);
        CompleteStructMemberSeq member_seq_HandshakeRequest;
        {
            TypeIdentifierPair type_ids_noa_active;
            ReturnCode_t return_code_noa_active {eprosima::fastdds::dds::RETCODE_OK};
            return_code_noa_active =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_noa_active);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_noa_active)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "noa_active Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_noa_active = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_noa_active = 0x00000000;
            bool common_noa_active_ec {false};
            CommonStructMember common_noa_active {TypeObjectUtils::build_common_struct_member(member_id_noa_active, member_flags_noa_active, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_noa_active, common_noa_active_ec))};
            if (!common_noa_active_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure noa_active member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_noa_active = "noa_active";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_noa_active;
            ann_custom_HandshakeRequest.reset();
            CompleteMemberDetail detail_noa_active = TypeObjectUtils::build_complete_member_detail(name_noa_active, member_ann_builtin_noa_active, ann_custom_HandshakeRequest);
            CompleteStructMember member_noa_active = TypeObjectUtils::build_complete_struct_member(common_noa_active, detail_noa_active);
            TypeObjectUtils::add_complete_struct_member(member_seq_HandshakeRequest, member_noa_active);
        }
        {
            TypeIdentifierPair type_ids_override_status;
            ReturnCode_t return_code_override_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_override_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_override_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_override_status)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "override_status Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_override_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_override_status = 0x00000001;
            bool common_override_status_ec {false};
            CommonStructMember common_override_status {TypeObjectUtils::build_common_struct_member(member_id_override_status, member_flags_override_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_override_status, common_override_status_ec))};
            if (!common_override_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure override_status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_override_status = "override_status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_override_status;
            ann_custom_HandshakeRequest.reset();
            CompleteMemberDetail detail_override_status = TypeObjectUtils::build_complete_member_detail(name_override_status, member_ann_builtin_override_status, ann_custom_HandshakeRequest);
            CompleteStructMember member_override_status = TypeObjectUtils::build_complete_struct_member(common_override_status, detail_override_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_HandshakeRequest, member_override_status);
        }
        {
            TypeIdentifierPair type_ids_override_ready;
            ReturnCode_t return_code_override_ready {eprosima::fastdds::dds::RETCODE_OK};
            return_code_override_ready =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_override_ready);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_override_ready)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "override_ready Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_override_ready = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_override_ready = 0x00000002;
            bool common_override_ready_ec {false};
            CommonStructMember common_override_ready {TypeObjectUtils::build_common_struct_member(member_id_override_ready, member_flags_override_ready, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_override_ready, common_override_ready_ec))};
            if (!common_override_ready_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure override_ready member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_override_ready = "override_ready";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_override_ready;
            ann_custom_HandshakeRequest.reset();
            CompleteMemberDetail detail_override_ready = TypeObjectUtils::build_complete_member_detail(name_override_ready, member_ann_builtin_override_ready, ann_custom_HandshakeRequest);
            CompleteStructMember member_override_ready = TypeObjectUtils::build_complete_struct_member(common_override_ready, detail_override_ready);
            TypeObjectUtils::add_complete_struct_member(member_seq_HandshakeRequest, member_override_ready);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000003;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_HandshakeRequest.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_HandshakeRequest);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_HandshakeRequest, member_timestamp);
        }
        CompleteStructType struct_type_HandshakeRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_HandshakeRequest, header_HandshakeRequest, member_seq_HandshakeRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_HandshakeRequest, type_name_HandshakeRequest.to_string(), type_ids_HandshakeRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "remote_msgs::HandshakeRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_HandshakeResponse_type_identifier(
        TypeIdentifierPair& type_ids_HandshakeResponse)
{

    ReturnCode_t return_code_HandshakeResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_HandshakeResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "remote_msgs::HandshakeResponse", type_ids_HandshakeResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_HandshakeResponse)
    {
        StructTypeFlag struct_flags_HandshakeResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_HandshakeResponse = "remote_msgs::HandshakeResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_HandshakeResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_HandshakeResponse;
        AppliedAnnotationSeq tmp_ann_custom_HandshakeResponse;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_HandshakeResponse;
        if (!tmp_ann_custom_HandshakeResponse.empty())
        {
            ann_custom_HandshakeResponse = tmp_ann_custom_HandshakeResponse;
        }

        CompleteTypeDetail detail_HandshakeResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_HandshakeResponse, ann_custom_HandshakeResponse, type_name_HandshakeResponse.to_string());
        CompleteStructHeader header_HandshakeResponse;
        header_HandshakeResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_HandshakeResponse);
        CompleteStructMemberSeq member_seq_HandshakeResponse;
        {
            TypeIdentifierPair type_ids_noa_active;
            ReturnCode_t return_code_noa_active {eprosima::fastdds::dds::RETCODE_OK};
            return_code_noa_active =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_noa_active);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_noa_active)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "noa_active Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_noa_active = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_noa_active = 0x00000000;
            bool common_noa_active_ec {false};
            CommonStructMember common_noa_active {TypeObjectUtils::build_common_struct_member(member_id_noa_active, member_flags_noa_active, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_noa_active, common_noa_active_ec))};
            if (!common_noa_active_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure noa_active member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_noa_active = "noa_active";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_noa_active;
            ann_custom_HandshakeResponse.reset();
            CompleteMemberDetail detail_noa_active = TypeObjectUtils::build_complete_member_detail(name_noa_active, member_ann_builtin_noa_active, ann_custom_HandshakeResponse);
            CompleteStructMember member_noa_active = TypeObjectUtils::build_complete_struct_member(common_noa_active, detail_noa_active);
            TypeObjectUtils::add_complete_struct_member(member_seq_HandshakeResponse, member_noa_active);
        }
        {
            TypeIdentifierPair type_ids_override_response;
            ReturnCode_t return_code_override_response {eprosima::fastdds::dds::RETCODE_OK};
            return_code_override_response =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_override_response);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_override_response)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "override_response Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_override_response = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_override_response = 0x00000001;
            bool common_override_response_ec {false};
            CommonStructMember common_override_response {TypeObjectUtils::build_common_struct_member(member_id_override_response, member_flags_override_response, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_override_response, common_override_response_ec))};
            if (!common_override_response_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure override_response member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_override_response = "override_response";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_override_response;
            ann_custom_HandshakeResponse.reset();
            CompleteMemberDetail detail_override_response = TypeObjectUtils::build_complete_member_detail(name_override_response, member_ann_builtin_override_response, ann_custom_HandshakeResponse);
            CompleteStructMember member_override_response = TypeObjectUtils::build_complete_struct_member(common_override_response, detail_override_response);
            TypeObjectUtils::add_complete_struct_member(member_seq_HandshakeResponse, member_override_response);
        }
        {
            TypeIdentifierPair type_ids_current_control_source;
            ReturnCode_t return_code_current_control_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_current_control_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_current_control_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_current_control_source)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "current_control_source Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_current_control_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_current_control_source = 0x00000002;
            bool common_current_control_source_ec {false};
            CommonStructMember common_current_control_source {TypeObjectUtils::build_common_struct_member(member_id_current_control_source, member_flags_current_control_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_current_control_source, common_current_control_source_ec))};
            if (!common_current_control_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure current_control_source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current_control_source = "current_control_source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current_control_source;
            ann_custom_HandshakeResponse.reset();
            CompleteMemberDetail detail_current_control_source = TypeObjectUtils::build_complete_member_detail(name_current_control_source, member_ann_builtin_current_control_source, ann_custom_HandshakeResponse);
            CompleteStructMember member_current_control_source = TypeObjectUtils::build_complete_struct_member(common_current_control_source, detail_current_control_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_HandshakeResponse, member_current_control_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000003;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_HandshakeResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_HandshakeResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_HandshakeResponse, member_timestamp);
        }
        CompleteStructType struct_type_HandshakeResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_HandshakeResponse, header_HandshakeResponse, member_seq_HandshakeResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_HandshakeResponse, type_name_HandshakeResponse.to_string(), type_ids_HandshakeResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "remote_msgs::HandshakeResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace remote_msgs

