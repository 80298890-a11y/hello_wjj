// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleStatusTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "VehicleStatusTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "VehicleStatus.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace remote_msgs {
void register_control_mode_type_identifier(
        TypeIdentifierPair& type_ids_control_mode)
{
    ReturnCode_t return_code_control_mode {eprosima::fastdds::dds::RETCODE_OK};
    return_code_control_mode =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "remote_msgs::control_mode", type_ids_control_mode);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_mode)
    {
        EnumTypeFlag enum_flags_control_mode = 0;
        BitBound bit_bound_control_mode = 32;
        CommonEnumeratedHeader common_control_mode = TypeObjectUtils::build_common_enumerated_header(bit_bound_control_mode);
        QualifiedTypeName type_name_control_mode = "remote_msgs::control_mode";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_control_mode;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_control_mode;
        CompleteTypeDetail detail_control_mode = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_control_mode, ann_custom_control_mode, type_name_control_mode.to_string());
        CompleteEnumeratedHeader header_control_mode = TypeObjectUtils::build_complete_enumerated_header(common_control_mode, detail_control_mode);
        CompleteEnumeratedLiteralSeq literal_seq_control_mode;
        {
            EnumeratedLiteralFlag flags_Auto = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Auto = TypeObjectUtils::build_common_enumerated_literal(0, flags_Auto);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Auto;
            ann_custom_control_mode.reset();
            MemberName name_Auto = "Auto";
            CompleteMemberDetail detail_Auto = TypeObjectUtils::build_complete_member_detail(name_Auto, member_ann_builtin_Auto, ann_custom_control_mode);
            CompleteEnumeratedLiteral literal_Auto = TypeObjectUtils::build_complete_enumerated_literal(common_Auto, detail_Auto);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_control_mode, literal_Auto);
        }
        {
            EnumeratedLiteralFlag flags_Manual = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Manual = TypeObjectUtils::build_common_enumerated_literal(1, flags_Manual);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Manual;
            ann_custom_control_mode.reset();
            MemberName name_Manual = "Manual";
            CompleteMemberDetail detail_Manual = TypeObjectUtils::build_complete_member_detail(name_Manual, member_ann_builtin_Manual, ann_custom_control_mode);
            CompleteEnumeratedLiteral literal_Manual = TypeObjectUtils::build_complete_enumerated_literal(common_Manual, detail_Manual);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_control_mode, literal_Manual);
        }
        {
            EnumeratedLiteralFlag flags_Remote = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Remote = TypeObjectUtils::build_common_enumerated_literal(2, flags_Remote);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Remote;
            ann_custom_control_mode.reset();
            MemberName name_Remote = "Remote";
            CompleteMemberDetail detail_Remote = TypeObjectUtils::build_complete_member_detail(name_Remote, member_ann_builtin_Remote, ann_custom_control_mode);
            CompleteEnumeratedLiteral literal_Remote = TypeObjectUtils::build_complete_enumerated_literal(common_Remote, detail_Remote);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_control_mode, literal_Remote);
        }
        CompleteEnumeratedType enumerated_type_control_mode = TypeObjectUtils::build_complete_enumerated_type(enum_flags_control_mode, header_control_mode,
                literal_seq_control_mode);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_control_mode, type_name_control_mode.to_string(), type_ids_control_mode))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "remote_msgs::control_mode already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_PowerModeType_type_identifier(
        TypeIdentifierPair& type_ids_PowerModeType)
{
    ReturnCode_t return_code_PowerModeType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_PowerModeType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "remote_msgs::PowerModeType", type_ids_PowerModeType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_PowerModeType)
    {
        EnumTypeFlag enum_flags_PowerModeType = 0;
        BitBound bit_bound_PowerModeType = 32;
        CommonEnumeratedHeader common_PowerModeType = TypeObjectUtils::build_common_enumerated_header(bit_bound_PowerModeType);
        QualifiedTypeName type_name_PowerModeType = "remote_msgs::PowerModeType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PowerModeType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PowerModeType;
        CompleteTypeDetail detail_PowerModeType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PowerModeType, ann_custom_PowerModeType, type_name_PowerModeType.to_string());
        CompleteEnumeratedHeader header_PowerModeType = TypeObjectUtils::build_complete_enumerated_header(common_PowerModeType, detail_PowerModeType);
        CompleteEnumeratedLiteralSeq literal_seq_PowerModeType;
        {
            EnumeratedLiteralFlag flags_POWERMODE_OFF = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_POWERMODE_OFF = TypeObjectUtils::build_common_enumerated_literal(0, flags_POWERMODE_OFF);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_POWERMODE_OFF;
            ann_custom_PowerModeType.reset();
            MemberName name_POWERMODE_OFF = "POWERMODE_OFF";
            CompleteMemberDetail detail_POWERMODE_OFF = TypeObjectUtils::build_complete_member_detail(name_POWERMODE_OFF, member_ann_builtin_POWERMODE_OFF, ann_custom_PowerModeType);
            CompleteEnumeratedLiteral literal_POWERMODE_OFF = TypeObjectUtils::build_complete_enumerated_literal(common_POWERMODE_OFF, detail_POWERMODE_OFF);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_PowerModeType, literal_POWERMODE_OFF);
        }
        {
            EnumeratedLiteralFlag flags_POWERMODE_ACC = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_POWERMODE_ACC = TypeObjectUtils::build_common_enumerated_literal(1, flags_POWERMODE_ACC);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_POWERMODE_ACC;
            ann_custom_PowerModeType.reset();
            MemberName name_POWERMODE_ACC = "POWERMODE_ACC";
            CompleteMemberDetail detail_POWERMODE_ACC = TypeObjectUtils::build_complete_member_detail(name_POWERMODE_ACC, member_ann_builtin_POWERMODE_ACC, ann_custom_PowerModeType);
            CompleteEnumeratedLiteral literal_POWERMODE_ACC = TypeObjectUtils::build_complete_enumerated_literal(common_POWERMODE_ACC, detail_POWERMODE_ACC);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_PowerModeType, literal_POWERMODE_ACC);
        }
        {
            EnumeratedLiteralFlag flags_POWERMODE_ON = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_POWERMODE_ON = TypeObjectUtils::build_common_enumerated_literal(2, flags_POWERMODE_ON);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_POWERMODE_ON;
            ann_custom_PowerModeType.reset();
            MemberName name_POWERMODE_ON = "POWERMODE_ON";
            CompleteMemberDetail detail_POWERMODE_ON = TypeObjectUtils::build_complete_member_detail(name_POWERMODE_ON, member_ann_builtin_POWERMODE_ON, ann_custom_PowerModeType);
            CompleteEnumeratedLiteral literal_POWERMODE_ON = TypeObjectUtils::build_complete_enumerated_literal(common_POWERMODE_ON, detail_POWERMODE_ON);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_PowerModeType, literal_POWERMODE_ON);
        }
        {
            EnumeratedLiteralFlag flags_POWERMODE_CRANK = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_POWERMODE_CRANK = TypeObjectUtils::build_common_enumerated_literal(3, flags_POWERMODE_CRANK);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_POWERMODE_CRANK;
            ann_custom_PowerModeType.reset();
            MemberName name_POWERMODE_CRANK = "POWERMODE_CRANK";
            CompleteMemberDetail detail_POWERMODE_CRANK = TypeObjectUtils::build_complete_member_detail(name_POWERMODE_CRANK, member_ann_builtin_POWERMODE_CRANK, ann_custom_PowerModeType);
            CompleteEnumeratedLiteral literal_POWERMODE_CRANK = TypeObjectUtils::build_complete_enumerated_literal(common_POWERMODE_CRANK, detail_POWERMODE_CRANK);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_PowerModeType, literal_POWERMODE_CRANK);
        }
        CompleteEnumeratedType enumerated_type_PowerModeType = TypeObjectUtils::build_complete_enumerated_type(enum_flags_PowerModeType, header_PowerModeType,
                literal_seq_PowerModeType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_PowerModeType, type_name_PowerModeType.to_string(), type_ids_PowerModeType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "remote_msgs::PowerModeType already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_VehicleStatus_type_identifier(
        TypeIdentifierPair& type_ids_VehicleStatus)
{

    ReturnCode_t return_code_VehicleStatus {eprosima::fastdds::dds::RETCODE_OK};
    return_code_VehicleStatus =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "remote_msgs::VehicleStatus", type_ids_VehicleStatus);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_VehicleStatus)
    {
        StructTypeFlag struct_flags_VehicleStatus = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_VehicleStatus = "remote_msgs::VehicleStatus";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_VehicleStatus;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_VehicleStatus;
        AppliedAnnotationSeq tmp_ann_custom_VehicleStatus;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_VehicleStatus;
        if (!tmp_ann_custom_VehicleStatus.empty())
        {
            ann_custom_VehicleStatus = tmp_ann_custom_VehicleStatus;
        }

        CompleteTypeDetail detail_VehicleStatus = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_VehicleStatus, ann_custom_VehicleStatus, type_name_VehicleStatus.to_string());
        CompleteStructHeader header_VehicleStatus;
        header_VehicleStatus = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_VehicleStatus);
        CompleteStructMemberSeq member_seq_VehicleStatus;
        {
            TypeIdentifierPair type_ids_vehicle_id;
            ReturnCode_t return_code_vehicle_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_vehicle_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_vehicle_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_vehicle_id)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "vehicle_id Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_vehicle_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_vehicle_id = 0x00000000;
            bool common_vehicle_id_ec {false};
            CommonStructMember common_vehicle_id {TypeObjectUtils::build_common_struct_member(member_id_vehicle_id, member_flags_vehicle_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_vehicle_id, common_vehicle_id_ec))};
            if (!common_vehicle_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure vehicle_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_vehicle_id = "vehicle_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_vehicle_id;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_vehicle_id = TypeObjectUtils::build_complete_member_detail(name_vehicle_id, member_ann_builtin_vehicle_id, ann_custom_VehicleStatus);
            CompleteStructMember member_vehicle_id = TypeObjectUtils::build_complete_struct_member(common_vehicle_id, detail_vehicle_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_vehicle_id);
        }
        {
            TypeIdentifierPair type_ids_current_control_mode;
            ReturnCode_t return_code_current_control_mode {eprosima::fastdds::dds::RETCODE_OK};
            return_code_current_control_mode =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "remote_msgs::control_mode", type_ids_current_control_mode);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_current_control_mode)
            {
                remote_msgs::register_control_mode_type_identifier(type_ids_current_control_mode);
            }
            StructMemberFlag member_flags_current_control_mode = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_current_control_mode = 0x00000001;
            bool common_current_control_mode_ec {false};
            CommonStructMember common_current_control_mode {TypeObjectUtils::build_common_struct_member(member_id_current_control_mode, member_flags_current_control_mode, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_current_control_mode, common_current_control_mode_ec))};
            if (!common_current_control_mode_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure current_control_mode member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current_control_mode = "current_control_mode";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current_control_mode;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_current_control_mode = TypeObjectUtils::build_complete_member_detail(name_current_control_mode, member_ann_builtin_current_control_mode, ann_custom_VehicleStatus);
            CompleteStructMember member_current_control_mode = TypeObjectUtils::build_complete_struct_member(common_current_control_mode, detail_current_control_mode);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_current_control_mode);
        }
        {
            TypeIdentifierPair type_ids_position_longitude;
            ReturnCode_t return_code_position_longitude {eprosima::fastdds::dds::RETCODE_OK};
            return_code_position_longitude =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_position_longitude);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_position_longitude)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "position_longitude Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_position_longitude = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_position_longitude = 0x00000002;
            bool common_position_longitude_ec {false};
            CommonStructMember common_position_longitude {TypeObjectUtils::build_common_struct_member(member_id_position_longitude, member_flags_position_longitude, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_position_longitude, common_position_longitude_ec))};
            if (!common_position_longitude_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure position_longitude member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_position_longitude = "position_longitude";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_position_longitude;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_position_longitude = TypeObjectUtils::build_complete_member_detail(name_position_longitude, member_ann_builtin_position_longitude, ann_custom_VehicleStatus);
            CompleteStructMember member_position_longitude = TypeObjectUtils::build_complete_struct_member(common_position_longitude, detail_position_longitude);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_position_longitude);
        }
        {
            TypeIdentifierPair type_ids_position_latitude;
            ReturnCode_t return_code_position_latitude {eprosima::fastdds::dds::RETCODE_OK};
            return_code_position_latitude =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_position_latitude);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_position_latitude)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "position_latitude Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_position_latitude = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_position_latitude = 0x00000003;
            bool common_position_latitude_ec {false};
            CommonStructMember common_position_latitude {TypeObjectUtils::build_common_struct_member(member_id_position_latitude, member_flags_position_latitude, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_position_latitude, common_position_latitude_ec))};
            if (!common_position_latitude_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure position_latitude member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_position_latitude = "position_latitude";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_position_latitude;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_position_latitude = TypeObjectUtils::build_complete_member_detail(name_position_latitude, member_ann_builtin_position_latitude, ann_custom_VehicleStatus);
            CompleteStructMember member_position_latitude = TypeObjectUtils::build_complete_struct_member(common_position_latitude, detail_position_latitude);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_position_latitude);
        }
        {
            TypeIdentifierPair type_ids_position_altitude;
            ReturnCode_t return_code_position_altitude {eprosima::fastdds::dds::RETCODE_OK};
            return_code_position_altitude =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_position_altitude);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_position_altitude)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "position_altitude Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_position_altitude = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_position_altitude = 0x00000004;
            bool common_position_altitude_ec {false};
            CommonStructMember common_position_altitude {TypeObjectUtils::build_common_struct_member(member_id_position_altitude, member_flags_position_altitude, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_position_altitude, common_position_altitude_ec))};
            if (!common_position_altitude_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure position_altitude member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_position_altitude = "position_altitude";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_position_altitude;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_position_altitude = TypeObjectUtils::build_complete_member_detail(name_position_altitude, member_ann_builtin_position_altitude, ann_custom_VehicleStatus);
            CompleteStructMember member_position_altitude = TypeObjectUtils::build_complete_struct_member(common_position_altitude, detail_position_altitude);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_position_altitude);
        }
        {
            TypeIdentifierPair type_ids_speed;
            ReturnCode_t return_code_speed {eprosima::fastdds::dds::RETCODE_OK};
            return_code_speed =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_speed);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_speed)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "speed Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_speed = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_speed = 0x00000005;
            bool common_speed_ec {false};
            CommonStructMember common_speed {TypeObjectUtils::build_common_struct_member(member_id_speed, member_flags_speed, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_speed, common_speed_ec))};
            if (!common_speed_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure speed member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_speed = "speed";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_speed;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_speed = TypeObjectUtils::build_complete_member_detail(name_speed, member_ann_builtin_speed, ann_custom_VehicleStatus);
            CompleteStructMember member_speed = TypeObjectUtils::build_complete_struct_member(common_speed, detail_speed);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_speed);
        }
        {
            TypeIdentifierPair type_ids_yawrate;
            ReturnCode_t return_code_yawrate {eprosima::fastdds::dds::RETCODE_OK};
            return_code_yawrate =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_yawrate);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_yawrate)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "yawrate Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_yawrate = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_yawrate = 0x00000006;
            bool common_yawrate_ec {false};
            CommonStructMember common_yawrate {TypeObjectUtils::build_common_struct_member(member_id_yawrate, member_flags_yawrate, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_yawrate, common_yawrate_ec))};
            if (!common_yawrate_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure yawrate member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_yawrate = "yawrate";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_yawrate;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_yawrate = TypeObjectUtils::build_complete_member_detail(name_yawrate, member_ann_builtin_yawrate, ann_custom_VehicleStatus);
            CompleteStructMember member_yawrate = TypeObjectUtils::build_complete_struct_member(common_yawrate, detail_yawrate);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_yawrate);
        }
        {
            TypeIdentifierPair type_ids_gear_position;
            ReturnCode_t return_code_gear_position {eprosima::fastdds::dds::RETCODE_OK};
            return_code_gear_position =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_gear_position);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_gear_position)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "gear_position Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_gear_position = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_gear_position = 0x00000007;
            bool common_gear_position_ec {false};
            CommonStructMember common_gear_position {TypeObjectUtils::build_common_struct_member(member_id_gear_position, member_flags_gear_position, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_gear_position, common_gear_position_ec))};
            if (!common_gear_position_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure gear_position member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_gear_position = "gear_position";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_gear_position;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_gear_position = TypeObjectUtils::build_complete_member_detail(name_gear_position, member_ann_builtin_gear_position, ann_custom_VehicleStatus);
            CompleteStructMember member_gear_position = TypeObjectUtils::build_complete_struct_member(common_gear_position, detail_gear_position);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_gear_position);
        }
        {
            TypeIdentifierPair type_ids_acceleration;
            ReturnCode_t return_code_acceleration {eprosima::fastdds::dds::RETCODE_OK};
            return_code_acceleration =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_acceleration);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_acceleration)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "acceleration Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_acceleration = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_acceleration = 0x00000008;
            bool common_acceleration_ec {false};
            CommonStructMember common_acceleration {TypeObjectUtils::build_common_struct_member(member_id_acceleration, member_flags_acceleration, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_acceleration, common_acceleration_ec))};
            if (!common_acceleration_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure acceleration member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_acceleration = "acceleration";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_acceleration;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_acceleration = TypeObjectUtils::build_complete_member_detail(name_acceleration, member_ann_builtin_acceleration, ann_custom_VehicleStatus);
            CompleteStructMember member_acceleration = TypeObjectUtils::build_complete_struct_member(common_acceleration, detail_acceleration);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_acceleration);
        }
        {
            TypeIdentifierPair type_ids_heading;
            ReturnCode_t return_code_heading {eprosima::fastdds::dds::RETCODE_OK};
            return_code_heading =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_heading);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_heading)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "heading Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_heading = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_heading = 0x00000009;
            bool common_heading_ec {false};
            CommonStructMember common_heading {TypeObjectUtils::build_common_struct_member(member_id_heading, member_flags_heading, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_heading, common_heading_ec))};
            if (!common_heading_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure heading member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_heading = "heading";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_heading;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_heading = TypeObjectUtils::build_complete_member_detail(name_heading, member_ann_builtin_heading, ann_custom_VehicleStatus);
            CompleteStructMember member_heading = TypeObjectUtils::build_complete_struct_member(common_heading, detail_heading);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_heading);
        }
        {
            TypeIdentifierPair type_ids_steering_angle;
            ReturnCode_t return_code_steering_angle {eprosima::fastdds::dds::RETCODE_OK};
            return_code_steering_angle =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_steering_angle);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_steering_angle)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "steering_angle Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_steering_angle = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_steering_angle = 0x0000000a;
            bool common_steering_angle_ec {false};
            CommonStructMember common_steering_angle {TypeObjectUtils::build_common_struct_member(member_id_steering_angle, member_flags_steering_angle, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_steering_angle, common_steering_angle_ec))};
            if (!common_steering_angle_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure steering_angle member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_steering_angle = "steering_angle";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_steering_angle;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_steering_angle = TypeObjectUtils::build_complete_member_detail(name_steering_angle, member_ann_builtin_steering_angle, ann_custom_VehicleStatus);
            CompleteStructMember member_steering_angle = TypeObjectUtils::build_complete_struct_member(common_steering_angle, detail_steering_angle);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_steering_angle);
        }
        {
            TypeIdentifierPair type_ids_wheel_angle;
            ReturnCode_t return_code_wheel_angle {eprosima::fastdds::dds::RETCODE_OK};
            return_code_wheel_angle =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_wheel_angle);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_wheel_angle)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "wheel_angle Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_wheel_angle = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_wheel_angle = 0x0000000b;
            bool common_wheel_angle_ec {false};
            CommonStructMember common_wheel_angle {TypeObjectUtils::build_common_struct_member(member_id_wheel_angle, member_flags_wheel_angle, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_wheel_angle, common_wheel_angle_ec))};
            if (!common_wheel_angle_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure wheel_angle member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_wheel_angle = "wheel_angle";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_wheel_angle;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_wheel_angle = TypeObjectUtils::build_complete_member_detail(name_wheel_angle, member_ann_builtin_wheel_angle, ann_custom_VehicleStatus);
            CompleteStructMember member_wheel_angle = TypeObjectUtils::build_complete_struct_member(common_wheel_angle, detail_wheel_angle);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_wheel_angle);
        }
        {
            TypeIdentifierPair type_ids_ebrake_status;
            ReturnCode_t return_code_ebrake_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ebrake_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_ebrake_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ebrake_status)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ebrake_status Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ebrake_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ebrake_status = 0x0000000c;
            bool common_ebrake_status_ec {false};
            CommonStructMember common_ebrake_status {TypeObjectUtils::build_common_struct_member(member_id_ebrake_status, member_flags_ebrake_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ebrake_status, common_ebrake_status_ec))};
            if (!common_ebrake_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ebrake_status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ebrake_status = "ebrake_status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ebrake_status;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_ebrake_status = TypeObjectUtils::build_complete_member_detail(name_ebrake_status, member_ann_builtin_ebrake_status, ann_custom_VehicleStatus);
            CompleteStructMember member_ebrake_status = TypeObjectUtils::build_complete_struct_member(common_ebrake_status, detail_ebrake_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_ebrake_status);
        }
        {
            TypeIdentifierPair type_ids_indicator_left;
            ReturnCode_t return_code_indicator_left {eprosima::fastdds::dds::RETCODE_OK};
            return_code_indicator_left =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_indicator_left);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_indicator_left)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "indicator_left Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_indicator_left = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_indicator_left = 0x0000000d;
            bool common_indicator_left_ec {false};
            CommonStructMember common_indicator_left {TypeObjectUtils::build_common_struct_member(member_id_indicator_left, member_flags_indicator_left, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_indicator_left, common_indicator_left_ec))};
            if (!common_indicator_left_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure indicator_left member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_indicator_left = "indicator_left";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_indicator_left;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_indicator_left = TypeObjectUtils::build_complete_member_detail(name_indicator_left, member_ann_builtin_indicator_left, ann_custom_VehicleStatus);
            CompleteStructMember member_indicator_left = TypeObjectUtils::build_complete_struct_member(common_indicator_left, detail_indicator_left);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_indicator_left);
        }
        {
            TypeIdentifierPair type_ids_indicator_right;
            ReturnCode_t return_code_indicator_right {eprosima::fastdds::dds::RETCODE_OK};
            return_code_indicator_right =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_indicator_right);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_indicator_right)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "indicator_right Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_indicator_right = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_indicator_right = 0x0000000e;
            bool common_indicator_right_ec {false};
            CommonStructMember common_indicator_right {TypeObjectUtils::build_common_struct_member(member_id_indicator_right, member_flags_indicator_right, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_indicator_right, common_indicator_right_ec))};
            if (!common_indicator_right_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure indicator_right member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_indicator_right = "indicator_right";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_indicator_right;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_indicator_right = TypeObjectUtils::build_complete_member_detail(name_indicator_right, member_ann_builtin_indicator_right, ann_custom_VehicleStatus);
            CompleteStructMember member_indicator_right = TypeObjectUtils::build_complete_struct_member(common_indicator_right, detail_indicator_right);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_indicator_right);
        }
        {
            TypeIdentifierPair type_ids_power_mode;
            ReturnCode_t return_code_power_mode {eprosima::fastdds::dds::RETCODE_OK};
            return_code_power_mode =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "remote_msgs::PowerModeType", type_ids_power_mode);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_power_mode)
            {
                remote_msgs::register_PowerModeType_type_identifier(type_ids_power_mode);
            }
            StructMemberFlag member_flags_power_mode = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_power_mode = 0x0000000f;
            bool common_power_mode_ec {false};
            CommonStructMember common_power_mode {TypeObjectUtils::build_common_struct_member(member_id_power_mode, member_flags_power_mode, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_power_mode, common_power_mode_ec))};
            if (!common_power_mode_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure power_mode member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_power_mode = "power_mode";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_power_mode;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_power_mode = TypeObjectUtils::build_complete_member_detail(name_power_mode, member_ann_builtin_power_mode, ann_custom_VehicleStatus);
            CompleteStructMember member_power_mode = TypeObjectUtils::build_complete_struct_member(common_power_mode, detail_power_mode);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_power_mode);
        }
        {
            TypeIdentifierPair type_ids_brake_light_status;
            ReturnCode_t return_code_brake_light_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_brake_light_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_brake_light_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_brake_light_status)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "brake_light_status Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_brake_light_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_brake_light_status = 0x00000010;
            bool common_brake_light_status_ec {false};
            CommonStructMember common_brake_light_status {TypeObjectUtils::build_common_struct_member(member_id_brake_light_status, member_flags_brake_light_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_brake_light_status, common_brake_light_status_ec))};
            if (!common_brake_light_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure brake_light_status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_brake_light_status = "brake_light_status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_brake_light_status;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_brake_light_status = TypeObjectUtils::build_complete_member_detail(name_brake_light_status, member_ann_builtin_brake_light_status, ann_custom_VehicleStatus);
            CompleteStructMember member_brake_light_status = TypeObjectUtils::build_complete_struct_member(common_brake_light_status, detail_brake_light_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_brake_light_status);
        }
        {
            TypeIdentifierPair type_ids_high_beam_status;
            ReturnCode_t return_code_high_beam_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_high_beam_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_high_beam_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_high_beam_status)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "high_beam_status Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_high_beam_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_high_beam_status = 0x00000011;
            bool common_high_beam_status_ec {false};
            CommonStructMember common_high_beam_status {TypeObjectUtils::build_common_struct_member(member_id_high_beam_status, member_flags_high_beam_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_high_beam_status, common_high_beam_status_ec))};
            if (!common_high_beam_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure high_beam_status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_high_beam_status = "high_beam_status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_high_beam_status;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_high_beam_status = TypeObjectUtils::build_complete_member_detail(name_high_beam_status, member_ann_builtin_high_beam_status, ann_custom_VehicleStatus);
            CompleteStructMember member_high_beam_status = TypeObjectUtils::build_complete_struct_member(common_high_beam_status, detail_high_beam_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_high_beam_status);
        }
        {
            TypeIdentifierPair type_ids_low_beam_status;
            ReturnCode_t return_code_low_beam_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_low_beam_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_low_beam_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_low_beam_status)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "low_beam_status Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_low_beam_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_low_beam_status = 0x00000012;
            bool common_low_beam_status_ec {false};
            CommonStructMember common_low_beam_status {TypeObjectUtils::build_common_struct_member(member_id_low_beam_status, member_flags_low_beam_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_low_beam_status, common_low_beam_status_ec))};
            if (!common_low_beam_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure low_beam_status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_low_beam_status = "low_beam_status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_low_beam_status;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_low_beam_status = TypeObjectUtils::build_complete_member_detail(name_low_beam_status, member_ann_builtin_low_beam_status, ann_custom_VehicleStatus);
            CompleteStructMember member_low_beam_status = TypeObjectUtils::build_complete_struct_member(common_low_beam_status, detail_low_beam_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_low_beam_status);
        }
        {
            TypeIdentifierPair type_ids_emergency_light_status;
            ReturnCode_t return_code_emergency_light_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_emergency_light_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_emergency_light_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_emergency_light_status)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "emergency_light_status Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_emergency_light_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_emergency_light_status = 0x00000013;
            bool common_emergency_light_status_ec {false};
            CommonStructMember common_emergency_light_status {TypeObjectUtils::build_common_struct_member(member_id_emergency_light_status, member_flags_emergency_light_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_emergency_light_status, common_emergency_light_status_ec))};
            if (!common_emergency_light_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure emergency_light_status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_emergency_light_status = "emergency_light_status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_emergency_light_status;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_emergency_light_status = TypeObjectUtils::build_complete_member_detail(name_emergency_light_status, member_ann_builtin_emergency_light_status, ann_custom_VehicleStatus);
            CompleteStructMember member_emergency_light_status = TypeObjectUtils::build_complete_struct_member(common_emergency_light_status, detail_emergency_light_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_emergency_light_status);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000014;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_VehicleStatus.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_VehicleStatus);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_VehicleStatus, member_timestamp);
        }
        CompleteStructType struct_type_VehicleStatus = TypeObjectUtils::build_complete_struct_type(struct_flags_VehicleStatus, header_VehicleStatus, member_seq_VehicleStatus);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_VehicleStatus, type_name_VehicleStatus.to_string(), type_ids_VehicleStatus))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "remote_msgs::VehicleStatus already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace remote_msgs

