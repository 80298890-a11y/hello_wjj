// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleStatus.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__REMOTE_MSGS_VEHICLESTATUS_HPP
#define FAST_DDS_GENERATED__REMOTE_MSGS_VEHICLESTATUS_HPP

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VEHICLESTATUS_SOURCE)
#define VEHICLESTATUS_DllAPI __declspec( dllexport )
#else
#define VEHICLESTATUS_DllAPI __declspec( dllimport )
#endif // VEHICLESTATUS_SOURCE
#else
#define VEHICLESTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define VEHICLESTATUS_DllAPI
#endif // _WIN32

namespace remote_msgs {

/*!
 * @brief This class represents the enumeration control_mode defined by the user in the IDL file.
 * @ingroup VehicleStatus
 */
enum class control_mode : int32_t
{
    Auto,
    Manual,
    Remote
};
/*!
 * @brief This class represents the enumeration PowerModeType defined by the user in the IDL file.
 * @ingroup VehicleStatus
 */
enum class PowerModeType : int32_t
{
    POWERMODE_OFF,
    POWERMODE_ACC,
    POWERMODE_ON,
    POWERMODE_CRANK
};
/*!
 * @brief This class represents the structure VehicleStatus defined by the user in the IDL file.
 * @ingroup VehicleStatus
 */
class VehicleStatus
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport VehicleStatus()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~VehicleStatus()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VehicleStatus that will be copied.
     */
    eProsima_user_DllExport VehicleStatus(
            const VehicleStatus& x)
    {
                    m_vehicle_id = x.m_vehicle_id;

                    m_current_control_mode = x.m_current_control_mode;

                    m_position_longitude = x.m_position_longitude;

                    m_position_latitude = x.m_position_latitude;

                    m_position_altitude = x.m_position_altitude;

                    m_speed = x.m_speed;

                    m_yawrate = x.m_yawrate;

                    m_gear_position = x.m_gear_position;

                    m_acceleration = x.m_acceleration;

                    m_heading = x.m_heading;

                    m_steering_angle = x.m_steering_angle;

                    m_wheel_angle = x.m_wheel_angle;

                    m_ebrake_status = x.m_ebrake_status;

                    m_indicator_left = x.m_indicator_left;

                    m_indicator_right = x.m_indicator_right;

                    m_power_mode = x.m_power_mode;

                    m_brake_light_status = x.m_brake_light_status;

                    m_high_beam_status = x.m_high_beam_status;

                    m_low_beam_status = x.m_low_beam_status;

                    m_emergency_light_status = x.m_emergency_light_status;

                    m_timestamp = x.m_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VehicleStatus that will be copied.
     */
    eProsima_user_DllExport VehicleStatus(
            VehicleStatus&& x) noexcept
    {
        m_vehicle_id = x.m_vehicle_id;
        m_current_control_mode = x.m_current_control_mode;
        m_position_longitude = x.m_position_longitude;
        m_position_latitude = x.m_position_latitude;
        m_position_altitude = x.m_position_altitude;
        m_speed = x.m_speed;
        m_yawrate = x.m_yawrate;
        m_gear_position = x.m_gear_position;
        m_acceleration = x.m_acceleration;
        m_heading = x.m_heading;
        m_steering_angle = x.m_steering_angle;
        m_wheel_angle = x.m_wheel_angle;
        m_ebrake_status = x.m_ebrake_status;
        m_indicator_left = x.m_indicator_left;
        m_indicator_right = x.m_indicator_right;
        m_power_mode = x.m_power_mode;
        m_brake_light_status = x.m_brake_light_status;
        m_high_beam_status = x.m_high_beam_status;
        m_low_beam_status = x.m_low_beam_status;
        m_emergency_light_status = x.m_emergency_light_status;
        m_timestamp = x.m_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VehicleStatus that will be copied.
     */
    eProsima_user_DllExport VehicleStatus& operator =(
            const VehicleStatus& x)
    {

                    m_vehicle_id = x.m_vehicle_id;

                    m_current_control_mode = x.m_current_control_mode;

                    m_position_longitude = x.m_position_longitude;

                    m_position_latitude = x.m_position_latitude;

                    m_position_altitude = x.m_position_altitude;

                    m_speed = x.m_speed;

                    m_yawrate = x.m_yawrate;

                    m_gear_position = x.m_gear_position;

                    m_acceleration = x.m_acceleration;

                    m_heading = x.m_heading;

                    m_steering_angle = x.m_steering_angle;

                    m_wheel_angle = x.m_wheel_angle;

                    m_ebrake_status = x.m_ebrake_status;

                    m_indicator_left = x.m_indicator_left;

                    m_indicator_right = x.m_indicator_right;

                    m_power_mode = x.m_power_mode;

                    m_brake_light_status = x.m_brake_light_status;

                    m_high_beam_status = x.m_high_beam_status;

                    m_low_beam_status = x.m_low_beam_status;

                    m_emergency_light_status = x.m_emergency_light_status;

                    m_timestamp = x.m_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VehicleStatus that will be copied.
     */
    eProsima_user_DllExport VehicleStatus& operator =(
            VehicleStatus&& x) noexcept
    {

        m_vehicle_id = x.m_vehicle_id;
        m_current_control_mode = x.m_current_control_mode;
        m_position_longitude = x.m_position_longitude;
        m_position_latitude = x.m_position_latitude;
        m_position_altitude = x.m_position_altitude;
        m_speed = x.m_speed;
        m_yawrate = x.m_yawrate;
        m_gear_position = x.m_gear_position;
        m_acceleration = x.m_acceleration;
        m_heading = x.m_heading;
        m_steering_angle = x.m_steering_angle;
        m_wheel_angle = x.m_wheel_angle;
        m_ebrake_status = x.m_ebrake_status;
        m_indicator_left = x.m_indicator_left;
        m_indicator_right = x.m_indicator_right;
        m_power_mode = x.m_power_mode;
        m_brake_light_status = x.m_brake_light_status;
        m_high_beam_status = x.m_high_beam_status;
        m_low_beam_status = x.m_low_beam_status;
        m_emergency_light_status = x.m_emergency_light_status;
        m_timestamp = x.m_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x VehicleStatus object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const VehicleStatus& x) const
    {
        return (m_vehicle_id == x.m_vehicle_id &&
           m_current_control_mode == x.m_current_control_mode &&
           m_position_longitude == x.m_position_longitude &&
           m_position_latitude == x.m_position_latitude &&
           m_position_altitude == x.m_position_altitude &&
           m_speed == x.m_speed &&
           m_yawrate == x.m_yawrate &&
           m_gear_position == x.m_gear_position &&
           m_acceleration == x.m_acceleration &&
           m_heading == x.m_heading &&
           m_steering_angle == x.m_steering_angle &&
           m_wheel_angle == x.m_wheel_angle &&
           m_ebrake_status == x.m_ebrake_status &&
           m_indicator_left == x.m_indicator_left &&
           m_indicator_right == x.m_indicator_right &&
           m_power_mode == x.m_power_mode &&
           m_brake_light_status == x.m_brake_light_status &&
           m_high_beam_status == x.m_high_beam_status &&
           m_low_beam_status == x.m_low_beam_status &&
           m_emergency_light_status == x.m_emergency_light_status &&
           m_timestamp == x.m_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x VehicleStatus object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const VehicleStatus& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member vehicle_id
     * @param _vehicle_id New value for member vehicle_id
     */
    eProsima_user_DllExport void vehicle_id(
            uint32_t _vehicle_id)
    {
        m_vehicle_id = _vehicle_id;
    }

    /*!
     * @brief This function returns the value of member vehicle_id
     * @return Value of member vehicle_id
     */
    eProsima_user_DllExport uint32_t vehicle_id() const
    {
        return m_vehicle_id;
    }

    /*!
     * @brief This function returns a reference to member vehicle_id
     * @return Reference to member vehicle_id
     */
    eProsima_user_DllExport uint32_t& vehicle_id()
    {
        return m_vehicle_id;
    }


    /*!
     * @brief This function sets a value in member current_control_mode
     * @param _current_control_mode New value for member current_control_mode
     */
    eProsima_user_DllExport void current_control_mode(
            control_mode _current_control_mode)
    {
        m_current_control_mode = _current_control_mode;
    }

    /*!
     * @brief This function returns the value of member current_control_mode
     * @return Value of member current_control_mode
     */
    eProsima_user_DllExport control_mode current_control_mode() const
    {
        return m_current_control_mode;
    }

    /*!
     * @brief This function returns a reference to member current_control_mode
     * @return Reference to member current_control_mode
     */
    eProsima_user_DllExport control_mode& current_control_mode()
    {
        return m_current_control_mode;
    }


    /*!
     * @brief This function sets a value in member position_longitude
     * @param _position_longitude New value for member position_longitude
     */
    eProsima_user_DllExport void position_longitude(
            float _position_longitude)
    {
        m_position_longitude = _position_longitude;
    }

    /*!
     * @brief This function returns the value of member position_longitude
     * @return Value of member position_longitude
     */
    eProsima_user_DllExport float position_longitude() const
    {
        return m_position_longitude;
    }

    /*!
     * @brief This function returns a reference to member position_longitude
     * @return Reference to member position_longitude
     */
    eProsima_user_DllExport float& position_longitude()
    {
        return m_position_longitude;
    }


    /*!
     * @brief This function sets a value in member position_latitude
     * @param _position_latitude New value for member position_latitude
     */
    eProsima_user_DllExport void position_latitude(
            float _position_latitude)
    {
        m_position_latitude = _position_latitude;
    }

    /*!
     * @brief This function returns the value of member position_latitude
     * @return Value of member position_latitude
     */
    eProsima_user_DllExport float position_latitude() const
    {
        return m_position_latitude;
    }

    /*!
     * @brief This function returns a reference to member position_latitude
     * @return Reference to member position_latitude
     */
    eProsima_user_DllExport float& position_latitude()
    {
        return m_position_latitude;
    }


    /*!
     * @brief This function sets a value in member position_altitude
     * @param _position_altitude New value for member position_altitude
     */
    eProsima_user_DllExport void position_altitude(
            float _position_altitude)
    {
        m_position_altitude = _position_altitude;
    }

    /*!
     * @brief This function returns the value of member position_altitude
     * @return Value of member position_altitude
     */
    eProsima_user_DllExport float position_altitude() const
    {
        return m_position_altitude;
    }

    /*!
     * @brief This function returns a reference to member position_altitude
     * @return Reference to member position_altitude
     */
    eProsima_user_DllExport float& position_altitude()
    {
        return m_position_altitude;
    }


    /*!
     * @brief This function sets a value in member speed
     * @param _speed New value for member speed
     */
    eProsima_user_DllExport void speed(
            float _speed)
    {
        m_speed = _speed;
    }

    /*!
     * @brief This function returns the value of member speed
     * @return Value of member speed
     */
    eProsima_user_DllExport float speed() const
    {
        return m_speed;
    }

    /*!
     * @brief This function returns a reference to member speed
     * @return Reference to member speed
     */
    eProsima_user_DllExport float& speed()
    {
        return m_speed;
    }


    /*!
     * @brief This function sets a value in member yawrate
     * @param _yawrate New value for member yawrate
     */
    eProsima_user_DllExport void yawrate(
            float _yawrate)
    {
        m_yawrate = _yawrate;
    }

    /*!
     * @brief This function returns the value of member yawrate
     * @return Value of member yawrate
     */
    eProsima_user_DllExport float yawrate() const
    {
        return m_yawrate;
    }

    /*!
     * @brief This function returns a reference to member yawrate
     * @return Reference to member yawrate
     */
    eProsima_user_DllExport float& yawrate()
    {
        return m_yawrate;
    }


    /*!
     * @brief This function sets a value in member gear_position
     * @param _gear_position New value for member gear_position
     */
    eProsima_user_DllExport void gear_position(
            float _gear_position)
    {
        m_gear_position = _gear_position;
    }

    /*!
     * @brief This function returns the value of member gear_position
     * @return Value of member gear_position
     */
    eProsima_user_DllExport float gear_position() const
    {
        return m_gear_position;
    }

    /*!
     * @brief This function returns a reference to member gear_position
     * @return Reference to member gear_position
     */
    eProsima_user_DllExport float& gear_position()
    {
        return m_gear_position;
    }


    /*!
     * @brief This function sets a value in member acceleration
     * @param _acceleration New value for member acceleration
     */
    eProsima_user_DllExport void acceleration(
            float _acceleration)
    {
        m_acceleration = _acceleration;
    }

    /*!
     * @brief This function returns the value of member acceleration
     * @return Value of member acceleration
     */
    eProsima_user_DllExport float acceleration() const
    {
        return m_acceleration;
    }

    /*!
     * @brief This function returns a reference to member acceleration
     * @return Reference to member acceleration
     */
    eProsima_user_DllExport float& acceleration()
    {
        return m_acceleration;
    }


    /*!
     * @brief This function sets a value in member heading
     * @param _heading New value for member heading
     */
    eProsima_user_DllExport void heading(
            float _heading)
    {
        m_heading = _heading;
    }

    /*!
     * @brief This function returns the value of member heading
     * @return Value of member heading
     */
    eProsima_user_DllExport float heading() const
    {
        return m_heading;
    }

    /*!
     * @brief This function returns a reference to member heading
     * @return Reference to member heading
     */
    eProsima_user_DllExport float& heading()
    {
        return m_heading;
    }


    /*!
     * @brief This function sets a value in member steering_angle
     * @param _steering_angle New value for member steering_angle
     */
    eProsima_user_DllExport void steering_angle(
            float _steering_angle)
    {
        m_steering_angle = _steering_angle;
    }

    /*!
     * @brief This function returns the value of member steering_angle
     * @return Value of member steering_angle
     */
    eProsima_user_DllExport float steering_angle() const
    {
        return m_steering_angle;
    }

    /*!
     * @brief This function returns a reference to member steering_angle
     * @return Reference to member steering_angle
     */
    eProsima_user_DllExport float& steering_angle()
    {
        return m_steering_angle;
    }


    /*!
     * @brief This function sets a value in member wheel_angle
     * @param _wheel_angle New value for member wheel_angle
     */
    eProsima_user_DllExport void wheel_angle(
            float _wheel_angle)
    {
        m_wheel_angle = _wheel_angle;
    }

    /*!
     * @brief This function returns the value of member wheel_angle
     * @return Value of member wheel_angle
     */
    eProsima_user_DllExport float wheel_angle() const
    {
        return m_wheel_angle;
    }

    /*!
     * @brief This function returns a reference to member wheel_angle
     * @return Reference to member wheel_angle
     */
    eProsima_user_DllExport float& wheel_angle()
    {
        return m_wheel_angle;
    }


    /*!
     * @brief This function sets a value in member ebrake_status
     * @param _ebrake_status New value for member ebrake_status
     */
    eProsima_user_DllExport void ebrake_status(
            int32_t _ebrake_status)
    {
        m_ebrake_status = _ebrake_status;
    }

    /*!
     * @brief This function returns the value of member ebrake_status
     * @return Value of member ebrake_status
     */
    eProsima_user_DllExport int32_t ebrake_status() const
    {
        return m_ebrake_status;
    }

    /*!
     * @brief This function returns a reference to member ebrake_status
     * @return Reference to member ebrake_status
     */
    eProsima_user_DllExport int32_t& ebrake_status()
    {
        return m_ebrake_status;
    }


    /*!
     * @brief This function sets a value in member indicator_left
     * @param _indicator_left New value for member indicator_left
     */
    eProsima_user_DllExport void indicator_left(
            int32_t _indicator_left)
    {
        m_indicator_left = _indicator_left;
    }

    /*!
     * @brief This function returns the value of member indicator_left
     * @return Value of member indicator_left
     */
    eProsima_user_DllExport int32_t indicator_left() const
    {
        return m_indicator_left;
    }

    /*!
     * @brief This function returns a reference to member indicator_left
     * @return Reference to member indicator_left
     */
    eProsima_user_DllExport int32_t& indicator_left()
    {
        return m_indicator_left;
    }


    /*!
     * @brief This function sets a value in member indicator_right
     * @param _indicator_right New value for member indicator_right
     */
    eProsima_user_DllExport void indicator_right(
            int32_t _indicator_right)
    {
        m_indicator_right = _indicator_right;
    }

    /*!
     * @brief This function returns the value of member indicator_right
     * @return Value of member indicator_right
     */
    eProsima_user_DllExport int32_t indicator_right() const
    {
        return m_indicator_right;
    }

    /*!
     * @brief This function returns a reference to member indicator_right
     * @return Reference to member indicator_right
     */
    eProsima_user_DllExport int32_t& indicator_right()
    {
        return m_indicator_right;
    }


    /*!
     * @brief This function sets a value in member power_mode
     * @param _power_mode New value for member power_mode
     */
    eProsima_user_DllExport void power_mode(
            PowerModeType _power_mode)
    {
        m_power_mode = _power_mode;
    }

    /*!
     * @brief This function returns the value of member power_mode
     * @return Value of member power_mode
     */
    eProsima_user_DllExport PowerModeType power_mode() const
    {
        return m_power_mode;
    }

    /*!
     * @brief This function returns a reference to member power_mode
     * @return Reference to member power_mode
     */
    eProsima_user_DllExport PowerModeType& power_mode()
    {
        return m_power_mode;
    }


    /*!
     * @brief This function sets a value in member brake_light_status
     * @param _brake_light_status New value for member brake_light_status
     */
    eProsima_user_DllExport void brake_light_status(
            bool _brake_light_status)
    {
        m_brake_light_status = _brake_light_status;
    }

    /*!
     * @brief This function returns the value of member brake_light_status
     * @return Value of member brake_light_status
     */
    eProsima_user_DllExport bool brake_light_status() const
    {
        return m_brake_light_status;
    }

    /*!
     * @brief This function returns a reference to member brake_light_status
     * @return Reference to member brake_light_status
     */
    eProsima_user_DllExport bool& brake_light_status()
    {
        return m_brake_light_status;
    }


    /*!
     * @brief This function sets a value in member high_beam_status
     * @param _high_beam_status New value for member high_beam_status
     */
    eProsima_user_DllExport void high_beam_status(
            bool _high_beam_status)
    {
        m_high_beam_status = _high_beam_status;
    }

    /*!
     * @brief This function returns the value of member high_beam_status
     * @return Value of member high_beam_status
     */
    eProsima_user_DllExport bool high_beam_status() const
    {
        return m_high_beam_status;
    }

    /*!
     * @brief This function returns a reference to member high_beam_status
     * @return Reference to member high_beam_status
     */
    eProsima_user_DllExport bool& high_beam_status()
    {
        return m_high_beam_status;
    }


    /*!
     * @brief This function sets a value in member low_beam_status
     * @param _low_beam_status New value for member low_beam_status
     */
    eProsima_user_DllExport void low_beam_status(
            bool _low_beam_status)
    {
        m_low_beam_status = _low_beam_status;
    }

    /*!
     * @brief This function returns the value of member low_beam_status
     * @return Value of member low_beam_status
     */
    eProsima_user_DllExport bool low_beam_status() const
    {
        return m_low_beam_status;
    }

    /*!
     * @brief This function returns a reference to member low_beam_status
     * @return Reference to member low_beam_status
     */
    eProsima_user_DllExport bool& low_beam_status()
    {
        return m_low_beam_status;
    }


    /*!
     * @brief This function sets a value in member emergency_light_status
     * @param _emergency_light_status New value for member emergency_light_status
     */
    eProsima_user_DllExport void emergency_light_status(
            bool _emergency_light_status)
    {
        m_emergency_light_status = _emergency_light_status;
    }

    /*!
     * @brief This function returns the value of member emergency_light_status
     * @return Value of member emergency_light_status
     */
    eProsima_user_DllExport bool emergency_light_status() const
    {
        return m_emergency_light_status;
    }

    /*!
     * @brief This function returns a reference to member emergency_light_status
     * @return Reference to member emergency_light_status
     */
    eProsima_user_DllExport bool& emergency_light_status()
    {
        return m_emergency_light_status;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }



private:

    uint32_t m_vehicle_id{0};
    control_mode m_current_control_mode{control_mode::Auto};
    float m_position_longitude{0.0};
    float m_position_latitude{0.0};
    float m_position_altitude{0.0};
    float m_speed{0.0};
    float m_yawrate{0.0};
    float m_gear_position{0.0};
    float m_acceleration{0.0};
    float m_heading{0.0};
    float m_steering_angle{0.0};
    float m_wheel_angle{0.0};
    int32_t m_ebrake_status{0};
    int32_t m_indicator_left{0};
    int32_t m_indicator_right{0};
    PowerModeType m_power_mode{PowerModeType::POWERMODE_OFF};
    bool m_brake_light_status{false};
    bool m_high_beam_status{false};
    bool m_low_beam_status{false};
    bool m_emergency_light_status{false};
    uint64_t m_timestamp{0};

};

} // namespace remote_msgs

#endif // _FAST_DDS_GENERATED_REMOTE_MSGS_VEHICLESTATUS_HPP_


