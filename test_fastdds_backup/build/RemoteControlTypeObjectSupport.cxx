// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RemoteControlTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "RemoteControlTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "RemoteControl.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace remote_msgs {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ControlCmd_type_identifier(
        TypeIdentifierPair& type_ids_ControlCmd)
{

    ReturnCode_t return_code_ControlCmd {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ControlCmd =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "remote_msgs::ControlCmd", type_ids_ControlCmd);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ControlCmd)
    {
        StructTypeFlag struct_flags_ControlCmd = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ControlCmd = "remote_msgs::ControlCmd";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ControlCmd;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ControlCmd;
        AppliedAnnotationSeq tmp_ann_custom_ControlCmd;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_ControlCmd;
        if (!tmp_ann_custom_ControlCmd.empty())
        {
            ann_custom_ControlCmd = tmp_ann_custom_ControlCmd;
        }

        CompleteTypeDetail detail_ControlCmd = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ControlCmd, ann_custom_ControlCmd, type_name_ControlCmd.to_string());
        CompleteStructHeader header_ControlCmd;
        header_ControlCmd = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ControlCmd);
        CompleteStructMemberSeq member_seq_ControlCmd;
        {
            TypeIdentifierPair type_ids_steering_angle_enable;
            ReturnCode_t return_code_steering_angle_enable {eprosima::fastdds::dds::RETCODE_OK};
            return_code_steering_angle_enable =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_steering_angle_enable);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_steering_angle_enable)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "steering_angle_enable Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_steering_angle_enable = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_steering_angle_enable = 0x00000000;
            bool common_steering_angle_enable_ec {false};
            CommonStructMember common_steering_angle_enable {TypeObjectUtils::build_common_struct_member(member_id_steering_angle_enable, member_flags_steering_angle_enable, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_steering_angle_enable, common_steering_angle_enable_ec))};
            if (!common_steering_angle_enable_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure steering_angle_enable member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_steering_angle_enable = "steering_angle_enable";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_steering_angle_enable;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_steering_angle_enable = TypeObjectUtils::build_complete_member_detail(name_steering_angle_enable, member_ann_builtin_steering_angle_enable, ann_custom_ControlCmd);
            CompleteStructMember member_steering_angle_enable = TypeObjectUtils::build_complete_struct_member(common_steering_angle_enable, detail_steering_angle_enable);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_steering_angle_enable);
        }
        {
            TypeIdentifierPair type_ids_steering_angle;
            ReturnCode_t return_code_steering_angle {eprosima::fastdds::dds::RETCODE_OK};
            return_code_steering_angle =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_steering_angle);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_steering_angle)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "steering_angle Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_steering_angle = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_steering_angle = 0x00000001;
            bool common_steering_angle_ec {false};
            CommonStructMember common_steering_angle {TypeObjectUtils::build_common_struct_member(member_id_steering_angle, member_flags_steering_angle, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_steering_angle, common_steering_angle_ec))};
            if (!common_steering_angle_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure steering_angle member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_steering_angle = "steering_angle";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_steering_angle;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_steering_angle = TypeObjectUtils::build_complete_member_detail(name_steering_angle, member_ann_builtin_steering_angle, ann_custom_ControlCmd);
            CompleteStructMember member_steering_angle = TypeObjectUtils::build_complete_struct_member(common_steering_angle, detail_steering_angle);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_steering_angle);
        }
        {
            TypeIdentifierPair type_ids_target_acceleration_enable;
            ReturnCode_t return_code_target_acceleration_enable {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target_acceleration_enable =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_target_acceleration_enable);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target_acceleration_enable)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "target_acceleration_enable Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_target_acceleration_enable = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target_acceleration_enable = 0x00000002;
            bool common_target_acceleration_enable_ec {false};
            CommonStructMember common_target_acceleration_enable {TypeObjectUtils::build_common_struct_member(member_id_target_acceleration_enable, member_flags_target_acceleration_enable, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target_acceleration_enable, common_target_acceleration_enable_ec))};
            if (!common_target_acceleration_enable_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target_acceleration_enable member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target_acceleration_enable = "target_acceleration_enable";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target_acceleration_enable;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_target_acceleration_enable = TypeObjectUtils::build_complete_member_detail(name_target_acceleration_enable, member_ann_builtin_target_acceleration_enable, ann_custom_ControlCmd);
            CompleteStructMember member_target_acceleration_enable = TypeObjectUtils::build_complete_struct_member(common_target_acceleration_enable, detail_target_acceleration_enable);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_target_acceleration_enable);
        }
        {
            TypeIdentifierPair type_ids_target_acceleration;
            ReturnCode_t return_code_target_acceleration {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target_acceleration =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_target_acceleration);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target_acceleration)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "target_acceleration Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_target_acceleration = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target_acceleration = 0x00000003;
            bool common_target_acceleration_ec {false};
            CommonStructMember common_target_acceleration {TypeObjectUtils::build_common_struct_member(member_id_target_acceleration, member_flags_target_acceleration, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target_acceleration, common_target_acceleration_ec))};
            if (!common_target_acceleration_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target_acceleration member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target_acceleration = "target_acceleration";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target_acceleration;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_target_acceleration = TypeObjectUtils::build_complete_member_detail(name_target_acceleration, member_ann_builtin_target_acceleration, ann_custom_ControlCmd);
            CompleteStructMember member_target_acceleration = TypeObjectUtils::build_complete_struct_member(common_target_acceleration, detail_target_acceleration);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_target_acceleration);
        }
        {
            TypeIdentifierPair type_ids_indicator_left_enable;
            ReturnCode_t return_code_indicator_left_enable {eprosima::fastdds::dds::RETCODE_OK};
            return_code_indicator_left_enable =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_indicator_left_enable);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_indicator_left_enable)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "indicator_left_enable Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_indicator_left_enable = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_indicator_left_enable = 0x00000004;
            bool common_indicator_left_enable_ec {false};
            CommonStructMember common_indicator_left_enable {TypeObjectUtils::build_common_struct_member(member_id_indicator_left_enable, member_flags_indicator_left_enable, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_indicator_left_enable, common_indicator_left_enable_ec))};
            if (!common_indicator_left_enable_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure indicator_left_enable member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_indicator_left_enable = "indicator_left_enable";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_indicator_left_enable;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_indicator_left_enable = TypeObjectUtils::build_complete_member_detail(name_indicator_left_enable, member_ann_builtin_indicator_left_enable, ann_custom_ControlCmd);
            CompleteStructMember member_indicator_left_enable = TypeObjectUtils::build_complete_struct_member(common_indicator_left_enable, detail_indicator_left_enable);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_indicator_left_enable);
        }
        {
            TypeIdentifierPair type_ids_indicator_left;
            ReturnCode_t return_code_indicator_left {eprosima::fastdds::dds::RETCODE_OK};
            return_code_indicator_left =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_indicator_left);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_indicator_left)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "indicator_left Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_indicator_left = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_indicator_left = 0x00000005;
            bool common_indicator_left_ec {false};
            CommonStructMember common_indicator_left {TypeObjectUtils::build_common_struct_member(member_id_indicator_left, member_flags_indicator_left, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_indicator_left, common_indicator_left_ec))};
            if (!common_indicator_left_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure indicator_left member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_indicator_left = "indicator_left";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_indicator_left;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_indicator_left = TypeObjectUtils::build_complete_member_detail(name_indicator_left, member_ann_builtin_indicator_left, ann_custom_ControlCmd);
            CompleteStructMember member_indicator_left = TypeObjectUtils::build_complete_struct_member(common_indicator_left, detail_indicator_left);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_indicator_left);
        }
        {
            TypeIdentifierPair type_ids_indicator_right_enable;
            ReturnCode_t return_code_indicator_right_enable {eprosima::fastdds::dds::RETCODE_OK};
            return_code_indicator_right_enable =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_indicator_right_enable);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_indicator_right_enable)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "indicator_right_enable Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_indicator_right_enable = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_indicator_right_enable = 0x00000006;
            bool common_indicator_right_enable_ec {false};
            CommonStructMember common_indicator_right_enable {TypeObjectUtils::build_common_struct_member(member_id_indicator_right_enable, member_flags_indicator_right_enable, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_indicator_right_enable, common_indicator_right_enable_ec))};
            if (!common_indicator_right_enable_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure indicator_right_enable member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_indicator_right_enable = "indicator_right_enable";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_indicator_right_enable;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_indicator_right_enable = TypeObjectUtils::build_complete_member_detail(name_indicator_right_enable, member_ann_builtin_indicator_right_enable, ann_custom_ControlCmd);
            CompleteStructMember member_indicator_right_enable = TypeObjectUtils::build_complete_struct_member(common_indicator_right_enable, detail_indicator_right_enable);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_indicator_right_enable);
        }
        {
            TypeIdentifierPair type_ids_indicator_right;
            ReturnCode_t return_code_indicator_right {eprosima::fastdds::dds::RETCODE_OK};
            return_code_indicator_right =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_indicator_right);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_indicator_right)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "indicator_right Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_indicator_right = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_indicator_right = 0x00000007;
            bool common_indicator_right_ec {false};
            CommonStructMember common_indicator_right {TypeObjectUtils::build_common_struct_member(member_id_indicator_right, member_flags_indicator_right, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_indicator_right, common_indicator_right_ec))};
            if (!common_indicator_right_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure indicator_right member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_indicator_right = "indicator_right";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_indicator_right;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_indicator_right = TypeObjectUtils::build_complete_member_detail(name_indicator_right, member_ann_builtin_indicator_right, ann_custom_ControlCmd);
            CompleteStructMember member_indicator_right = TypeObjectUtils::build_complete_struct_member(common_indicator_right, detail_indicator_right);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_indicator_right);
        }
        {
            TypeIdentifierPair type_ids_gear_position_enable;
            ReturnCode_t return_code_gear_position_enable {eprosima::fastdds::dds::RETCODE_OK};
            return_code_gear_position_enable =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_gear_position_enable);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_gear_position_enable)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "gear_position_enable Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_gear_position_enable = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_gear_position_enable = 0x00000008;
            bool common_gear_position_enable_ec {false};
            CommonStructMember common_gear_position_enable {TypeObjectUtils::build_common_struct_member(member_id_gear_position_enable, member_flags_gear_position_enable, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_gear_position_enable, common_gear_position_enable_ec))};
            if (!common_gear_position_enable_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure gear_position_enable member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_gear_position_enable = "gear_position_enable";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_gear_position_enable;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_gear_position_enable = TypeObjectUtils::build_complete_member_detail(name_gear_position_enable, member_ann_builtin_gear_position_enable, ann_custom_ControlCmd);
            CompleteStructMember member_gear_position_enable = TypeObjectUtils::build_complete_struct_member(common_gear_position_enable, detail_gear_position_enable);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_gear_position_enable);
        }
        {
            TypeIdentifierPair type_ids_gear_position;
            ReturnCode_t return_code_gear_position {eprosima::fastdds::dds::RETCODE_OK};
            return_code_gear_position =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_gear_position);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_gear_position)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "gear_position Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_gear_position = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_gear_position = 0x00000009;
            bool common_gear_position_ec {false};
            CommonStructMember common_gear_position {TypeObjectUtils::build_common_struct_member(member_id_gear_position, member_flags_gear_position, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_gear_position, common_gear_position_ec))};
            if (!common_gear_position_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure gear_position member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_gear_position = "gear_position";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_gear_position;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_gear_position = TypeObjectUtils::build_complete_member_detail(name_gear_position, member_ann_builtin_gear_position, ann_custom_ControlCmd);
            CompleteStructMember member_gear_position = TypeObjectUtils::build_complete_struct_member(common_gear_position, detail_gear_position);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_gear_position);
        }
        {
            TypeIdentifierPair type_ids_ebrake_status_enable;
            ReturnCode_t return_code_ebrake_status_enable {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ebrake_status_enable =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_ebrake_status_enable);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ebrake_status_enable)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ebrake_status_enable Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ebrake_status_enable = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ebrake_status_enable = 0x0000000a;
            bool common_ebrake_status_enable_ec {false};
            CommonStructMember common_ebrake_status_enable {TypeObjectUtils::build_common_struct_member(member_id_ebrake_status_enable, member_flags_ebrake_status_enable, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ebrake_status_enable, common_ebrake_status_enable_ec))};
            if (!common_ebrake_status_enable_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ebrake_status_enable member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ebrake_status_enable = "ebrake_status_enable";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ebrake_status_enable;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_ebrake_status_enable = TypeObjectUtils::build_complete_member_detail(name_ebrake_status_enable, member_ann_builtin_ebrake_status_enable, ann_custom_ControlCmd);
            CompleteStructMember member_ebrake_status_enable = TypeObjectUtils::build_complete_struct_member(common_ebrake_status_enable, detail_ebrake_status_enable);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_ebrake_status_enable);
        }
        {
            TypeIdentifierPair type_ids_ebrake_status;
            ReturnCode_t return_code_ebrake_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ebrake_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_ebrake_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ebrake_status)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ebrake_status Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ebrake_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ebrake_status = 0x0000000b;
            bool common_ebrake_status_ec {false};
            CommonStructMember common_ebrake_status {TypeObjectUtils::build_common_struct_member(member_id_ebrake_status, member_flags_ebrake_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ebrake_status, common_ebrake_status_ec))};
            if (!common_ebrake_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ebrake_status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ebrake_status = "ebrake_status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ebrake_status;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_ebrake_status = TypeObjectUtils::build_complete_member_detail(name_ebrake_status, member_ann_builtin_ebrake_status, ann_custom_ControlCmd);
            CompleteStructMember member_ebrake_status = TypeObjectUtils::build_complete_struct_member(common_ebrake_status, detail_ebrake_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_ebrake_status);
        }
        {
            TypeIdentifierPair type_ids_remote_drive_ready;
            ReturnCode_t return_code_remote_drive_ready {eprosima::fastdds::dds::RETCODE_OK};
            return_code_remote_drive_ready =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_remote_drive_ready);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_remote_drive_ready)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "remote_drive_ready Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_remote_drive_ready = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_remote_drive_ready = 0x0000000c;
            bool common_remote_drive_ready_ec {false};
            CommonStructMember common_remote_drive_ready {TypeObjectUtils::build_common_struct_member(member_id_remote_drive_ready, member_flags_remote_drive_ready, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_remote_drive_ready, common_remote_drive_ready_ec))};
            if (!common_remote_drive_ready_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure remote_drive_ready member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_remote_drive_ready = "remote_drive_ready";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_remote_drive_ready;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_remote_drive_ready = TypeObjectUtils::build_complete_member_detail(name_remote_drive_ready, member_ann_builtin_remote_drive_ready, ann_custom_ControlCmd);
            CompleteStructMember member_remote_drive_ready = TypeObjectUtils::build_complete_struct_member(common_remote_drive_ready, detail_remote_drive_ready);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_remote_drive_ready);
        }
        {
            TypeIdentifierPair type_ids_remote_drive_takeover_request;
            ReturnCode_t return_code_remote_drive_takeover_request {eprosima::fastdds::dds::RETCODE_OK};
            return_code_remote_drive_takeover_request =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_remote_drive_takeover_request);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_remote_drive_takeover_request)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "remote_drive_takeover_request Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_remote_drive_takeover_request = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_remote_drive_takeover_request = 0x0000000d;
            bool common_remote_drive_takeover_request_ec {false};
            CommonStructMember common_remote_drive_takeover_request {TypeObjectUtils::build_common_struct_member(member_id_remote_drive_takeover_request, member_flags_remote_drive_takeover_request, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_remote_drive_takeover_request, common_remote_drive_takeover_request_ec))};
            if (!common_remote_drive_takeover_request_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure remote_drive_takeover_request member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_remote_drive_takeover_request = "remote_drive_takeover_request";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_remote_drive_takeover_request;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_remote_drive_takeover_request = TypeObjectUtils::build_complete_member_detail(name_remote_drive_takeover_request, member_ann_builtin_remote_drive_takeover_request, ann_custom_ControlCmd);
            CompleteStructMember member_remote_drive_takeover_request = TypeObjectUtils::build_complete_struct_member(common_remote_drive_takeover_request, detail_remote_drive_takeover_request);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_remote_drive_takeover_request);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x0000000e;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_ControlCmd.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_ControlCmd);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_ControlCmd, member_timestamp);
        }
        CompleteStructType struct_type_ControlCmd = TypeObjectUtils::build_complete_struct_type(struct_flags_ControlCmd, header_ControlCmd, member_seq_ControlCmd);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ControlCmd, type_name_ControlCmd.to_string(), type_ids_ControlCmd))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "remote_msgs::ControlCmd already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace remote_msgs

