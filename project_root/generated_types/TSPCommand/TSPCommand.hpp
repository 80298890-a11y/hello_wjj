// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TSPCommand.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__ZHIJIAYUN_TSPCOMMAND_HPP
#define FAST_DDS_GENERATED__ZHIJIAYUN_TSPCOMMAND_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TSPCOMMAND_SOURCE)
#define TSPCOMMAND_DllAPI __declspec( dllexport )
#else
#define TSPCOMMAND_DllAPI __declspec( dllimport )
#endif // TSPCOMMAND_SOURCE
#else
#define TSPCOMMAND_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TSPCOMMAND_DllAPI
#endif // _WIN32

namespace zhijiayun {

/*!
 * @brief This class represents the structure TSPCommand defined by the user in the IDL file.
 * @ingroup TSPCommand
 */
class TSPCommand
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TSPCommand()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TSPCommand()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TSPCommand that will be copied.
     */
    eProsima_user_DllExport TSPCommand(
            const TSPCommand& x)
    {
                    m_action = x.m_action;

                    m_module_name = x.m_module_name;

                    m_command_id = x.m_command_id;

                    m_cloud_timestamp = x.m_cloud_timestamp;

                    m_mqtt_timestamp = x.m_mqtt_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TSPCommand that will be copied.
     */
    eProsima_user_DllExport TSPCommand(
            TSPCommand&& x) noexcept
    {
        m_action = std::move(x.m_action);
        m_module_name = std::move(x.m_module_name);
        m_command_id = std::move(x.m_command_id);
        m_cloud_timestamp = x.m_cloud_timestamp;
        m_mqtt_timestamp = x.m_mqtt_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TSPCommand that will be copied.
     */
    eProsima_user_DllExport TSPCommand& operator =(
            const TSPCommand& x)
    {

                    m_action = x.m_action;

                    m_module_name = x.m_module_name;

                    m_command_id = x.m_command_id;

                    m_cloud_timestamp = x.m_cloud_timestamp;

                    m_mqtt_timestamp = x.m_mqtt_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TSPCommand that will be copied.
     */
    eProsima_user_DllExport TSPCommand& operator =(
            TSPCommand&& x) noexcept
    {

        m_action = std::move(x.m_action);
        m_module_name = std::move(x.m_module_name);
        m_command_id = std::move(x.m_command_id);
        m_cloud_timestamp = x.m_cloud_timestamp;
        m_mqtt_timestamp = x.m_mqtt_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x TSPCommand object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TSPCommand& x) const
    {
        return (m_action == x.m_action &&
           m_module_name == x.m_module_name &&
           m_command_id == x.m_command_id &&
           m_cloud_timestamp == x.m_cloud_timestamp &&
           m_mqtt_timestamp == x.m_mqtt_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x TSPCommand object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TSPCommand& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member action
     * @param _action New value to be copied in member action
     */
    eProsima_user_DllExport void action(
            const std::string& _action)
    {
        m_action = _action;
    }

    /*!
     * @brief This function moves the value in member action
     * @param _action New value to be moved in member action
     */
    eProsima_user_DllExport void action(
            std::string&& _action)
    {
        m_action = std::move(_action);
    }

    /*!
     * @brief This function returns a constant reference to member action
     * @return Constant reference to member action
     */
    eProsima_user_DllExport const std::string& action() const
    {
        return m_action;
    }

    /*!
     * @brief This function returns a reference to member action
     * @return Reference to member action
     */
    eProsima_user_DllExport std::string& action()
    {
        return m_action;
    }


    /*!
     * @brief This function copies the value in member module_name
     * @param _module_name New value to be copied in member module_name
     */
    eProsima_user_DllExport void module_name(
            const std::string& _module_name)
    {
        m_module_name = _module_name;
    }

    /*!
     * @brief This function moves the value in member module_name
     * @param _module_name New value to be moved in member module_name
     */
    eProsima_user_DllExport void module_name(
            std::string&& _module_name)
    {
        m_module_name = std::move(_module_name);
    }

    /*!
     * @brief This function returns a constant reference to member module_name
     * @return Constant reference to member module_name
     */
    eProsima_user_DllExport const std::string& module_name() const
    {
        return m_module_name;
    }

    /*!
     * @brief This function returns a reference to member module_name
     * @return Reference to member module_name
     */
    eProsima_user_DllExport std::string& module_name()
    {
        return m_module_name;
    }


    /*!
     * @brief This function copies the value in member command_id
     * @param _command_id New value to be copied in member command_id
     */
    eProsima_user_DllExport void command_id(
            const std::string& _command_id)
    {
        m_command_id = _command_id;
    }

    /*!
     * @brief This function moves the value in member command_id
     * @param _command_id New value to be moved in member command_id
     */
    eProsima_user_DllExport void command_id(
            std::string&& _command_id)
    {
        m_command_id = std::move(_command_id);
    }

    /*!
     * @brief This function returns a constant reference to member command_id
     * @return Constant reference to member command_id
     */
    eProsima_user_DllExport const std::string& command_id() const
    {
        return m_command_id;
    }

    /*!
     * @brief This function returns a reference to member command_id
     * @return Reference to member command_id
     */
    eProsima_user_DllExport std::string& command_id()
    {
        return m_command_id;
    }


    /*!
     * @brief This function sets a value in member cloud_timestamp
     * @param _cloud_timestamp New value for member cloud_timestamp
     */
    eProsima_user_DllExport void cloud_timestamp(
            uint64_t _cloud_timestamp)
    {
        m_cloud_timestamp = _cloud_timestamp;
    }

    /*!
     * @brief This function returns the value of member cloud_timestamp
     * @return Value of member cloud_timestamp
     */
    eProsima_user_DllExport uint64_t cloud_timestamp() const
    {
        return m_cloud_timestamp;
    }

    /*!
     * @brief This function returns a reference to member cloud_timestamp
     * @return Reference to member cloud_timestamp
     */
    eProsima_user_DllExport uint64_t& cloud_timestamp()
    {
        return m_cloud_timestamp;
    }


    /*!
     * @brief This function sets a value in member mqtt_timestamp
     * @param _mqtt_timestamp New value for member mqtt_timestamp
     */
    eProsima_user_DllExport void mqtt_timestamp(
            uint64_t _mqtt_timestamp)
    {
        m_mqtt_timestamp = _mqtt_timestamp;
    }

    /*!
     * @brief This function returns the value of member mqtt_timestamp
     * @return Value of member mqtt_timestamp
     */
    eProsima_user_DllExport uint64_t mqtt_timestamp() const
    {
        return m_mqtt_timestamp;
    }

    /*!
     * @brief This function returns a reference to member mqtt_timestamp
     * @return Reference to member mqtt_timestamp
     */
    eProsima_user_DllExport uint64_t& mqtt_timestamp()
    {
        return m_mqtt_timestamp;
    }



private:

    std::string m_action;
    std::string m_module_name;
    std::string m_command_id;
    uint64_t m_cloud_timestamp{0};
    uint64_t m_mqtt_timestamp{0};

};

} // namespace zhijiayun

#endif // _FAST_DDS_GENERATED_ZHIJIAYUN_TSPCOMMAND_HPP_


