// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TSPCommandTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "TSPCommandTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "TSPCommand.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace zhijiayun {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_TSPCommand_type_identifier(
        TypeIdentifierPair& type_ids_TSPCommand)
{

    ReturnCode_t return_code_TSPCommand {eprosima::fastdds::dds::RETCODE_OK};
    return_code_TSPCommand =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "zhijiayun::TSPCommand", type_ids_TSPCommand);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_TSPCommand)
    {
        StructTypeFlag struct_flags_TSPCommand = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_TSPCommand = "zhijiayun::TSPCommand";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_TSPCommand;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_TSPCommand;
        CompleteTypeDetail detail_TSPCommand = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_TSPCommand, ann_custom_TSPCommand, type_name_TSPCommand.to_string());
        CompleteStructHeader header_TSPCommand;
        header_TSPCommand = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_TSPCommand);
        CompleteStructMemberSeq member_seq_TSPCommand;
        {
            TypeIdentifierPair type_ids_action;
            ReturnCode_t return_code_action {eprosima::fastdds::dds::RETCODE_OK};
            return_code_action =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_action);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_action)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_action))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_action = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_action = 0x00000000;
            bool common_action_ec {false};
            CommonStructMember common_action {TypeObjectUtils::build_common_struct_member(member_id_action, member_flags_action, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_action, common_action_ec))};
            if (!common_action_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure action member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_action = "action";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_action;
            ann_custom_TSPCommand.reset();
            CompleteMemberDetail detail_action = TypeObjectUtils::build_complete_member_detail(name_action, member_ann_builtin_action, ann_custom_TSPCommand);
            CompleteStructMember member_action = TypeObjectUtils::build_complete_struct_member(common_action, detail_action);
            TypeObjectUtils::add_complete_struct_member(member_seq_TSPCommand, member_action);
        }
        {
            TypeIdentifierPair type_ids_module_name;
            ReturnCode_t return_code_module_name {eprosima::fastdds::dds::RETCODE_OK};
            return_code_module_name =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_module_name);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_module_name)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_module_name))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_module_name = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_module_name = 0x00000001;
            bool common_module_name_ec {false};
            CommonStructMember common_module_name {TypeObjectUtils::build_common_struct_member(member_id_module_name, member_flags_module_name, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_module_name, common_module_name_ec))};
            if (!common_module_name_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure module_name member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_module_name = "module_name";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_module_name;
            ann_custom_TSPCommand.reset();
            CompleteMemberDetail detail_module_name = TypeObjectUtils::build_complete_member_detail(name_module_name, member_ann_builtin_module_name, ann_custom_TSPCommand);
            CompleteStructMember member_module_name = TypeObjectUtils::build_complete_struct_member(common_module_name, detail_module_name);
            TypeObjectUtils::add_complete_struct_member(member_seq_TSPCommand, member_module_name);
        }
        {
            TypeIdentifierPair type_ids_command_id;
            ReturnCode_t return_code_command_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_command_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_command_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_command_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_command_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_command_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_command_id = 0x00000002;
            bool common_command_id_ec {false};
            CommonStructMember common_command_id {TypeObjectUtils::build_common_struct_member(member_id_command_id, member_flags_command_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_command_id, common_command_id_ec))};
            if (!common_command_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure command_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_command_id = "command_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_command_id;
            ann_custom_TSPCommand.reset();
            CompleteMemberDetail detail_command_id = TypeObjectUtils::build_complete_member_detail(name_command_id, member_ann_builtin_command_id, ann_custom_TSPCommand);
            CompleteStructMember member_command_id = TypeObjectUtils::build_complete_struct_member(common_command_id, detail_command_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_TSPCommand, member_command_id);
        }
        {
            TypeIdentifierPair type_ids_cloud_timestamp;
            ReturnCode_t return_code_cloud_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_cloud_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_cloud_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_cloud_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "cloud_timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_cloud_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_cloud_timestamp = 0x00000003;
            bool common_cloud_timestamp_ec {false};
            CommonStructMember common_cloud_timestamp {TypeObjectUtils::build_common_struct_member(member_id_cloud_timestamp, member_flags_cloud_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_cloud_timestamp, common_cloud_timestamp_ec))};
            if (!common_cloud_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure cloud_timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_cloud_timestamp = "cloud_timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_cloud_timestamp;
            ann_custom_TSPCommand.reset();
            CompleteMemberDetail detail_cloud_timestamp = TypeObjectUtils::build_complete_member_detail(name_cloud_timestamp, member_ann_builtin_cloud_timestamp, ann_custom_TSPCommand);
            CompleteStructMember member_cloud_timestamp = TypeObjectUtils::build_complete_struct_member(common_cloud_timestamp, detail_cloud_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_TSPCommand, member_cloud_timestamp);
        }
        {
            TypeIdentifierPair type_ids_mqtt_timestamp;
            ReturnCode_t return_code_mqtt_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_mqtt_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_mqtt_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_mqtt_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "mqtt_timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_mqtt_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_mqtt_timestamp = 0x00000004;
            bool common_mqtt_timestamp_ec {false};
            CommonStructMember common_mqtt_timestamp {TypeObjectUtils::build_common_struct_member(member_id_mqtt_timestamp, member_flags_mqtt_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_mqtt_timestamp, common_mqtt_timestamp_ec))};
            if (!common_mqtt_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure mqtt_timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_mqtt_timestamp = "mqtt_timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mqtt_timestamp;
            ann_custom_TSPCommand.reset();
            CompleteMemberDetail detail_mqtt_timestamp = TypeObjectUtils::build_complete_member_detail(name_mqtt_timestamp, member_ann_builtin_mqtt_timestamp, ann_custom_TSPCommand);
            CompleteStructMember member_mqtt_timestamp = TypeObjectUtils::build_complete_struct_member(common_mqtt_timestamp, detail_mqtt_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_TSPCommand, member_mqtt_timestamp);
        }
        CompleteStructType struct_type_TSPCommand = TypeObjectUtils::build_complete_struct_type(struct_flags_TSPCommand, header_TSPCommand, member_seq_TSPCommand);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_TSPCommand, type_name_TSPCommand.to_string(), type_ids_TSPCommand))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "zhijiayun::TSPCommand already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace zhijiayun

