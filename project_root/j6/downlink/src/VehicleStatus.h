// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_REMOTE_MSGS_VEHICLESTATUS_H_
#define _FAST_DDS_GENERATED_REMOTE_MSGS_VEHICLESTATUS_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VehicleStatus_SOURCE)
#define VehicleStatus_DllAPI __declspec( dllexport )
#else
#define VehicleStatus_DllAPI __declspec( dllimport )
#endif // VehicleStatus_SOURCE
#else
#define VehicleStatus_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define VehicleStatus_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace remote_msgs {
    /*!
     * @brief This class represents the enumeration ControlMode defined by the user in the IDL file.
     * @ingroup VEHICLESTATUS
     */
    enum ControlMode : uint32_t
    {
        Auto,
        Manual,
        Remote
    };
    /*!
     * @brief This class represents the enumeration PowerModeType defined by the user in the IDL file.
     * @ingroup VEHICLESTATUS
     */
    enum PowerModeType : uint32_t
    {
        POWERMODE_OFF,
        POWERMODE_ACC,
        POWERMODE_ON,
        POWERMODE_CRANK
    };
    /*!
     * @brief This class represents the structure VehicleStatus defined by the user in the IDL file.
     * @ingroup VEHICLESTATUS
     */
    class VehicleStatus
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport VehicleStatus();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~VehicleStatus();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object remote_msgs::VehicleStatus that will be copied.
         */
        eProsima_user_DllExport VehicleStatus(
                const VehicleStatus& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object remote_msgs::VehicleStatus that will be copied.
         */
        eProsima_user_DllExport VehicleStatus(
                VehicleStatus&& x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object remote_msgs::VehicleStatus that will be copied.
         */
        eProsima_user_DllExport VehicleStatus& operator =(
                const VehicleStatus& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object remote_msgs::VehicleStatus that will be copied.
         */
        eProsima_user_DllExport VehicleStatus& operator =(
                VehicleStatus&& x);

        /*!
         * @brief Comparison operator.
         * @param x remote_msgs::VehicleStatus object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const VehicleStatus& x) const;

        /*!
         * @brief Comparison operator.
         * @param x remote_msgs::VehicleStatus object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const VehicleStatus& x) const;

        /*!
         * @brief This function sets a value in member vehicle_id
         * @param _vehicle_id New value for member vehicle_id
         */
        eProsima_user_DllExport void vehicle_id(
                uint32_t _vehicle_id);

        /*!
         * @brief This function returns the value of member vehicle_id
         * @return Value of member vehicle_id
         */
        eProsima_user_DllExport uint32_t vehicle_id() const;

        /*!
         * @brief This function returns a reference to member vehicle_id
         * @return Reference to member vehicle_id
         */
        eProsima_user_DllExport uint32_t& vehicle_id();

        /*!
         * @brief This function sets a value in member control_mode
         * @param _control_mode New value for member control_mode
         */
        eProsima_user_DllExport void control_mode(
                remote_msgs::ControlMode _control_mode);

        /*!
         * @brief This function returns the value of member control_mode
         * @return Value of member control_mode
         */
        eProsima_user_DllExport remote_msgs::ControlMode control_mode() const;

        /*!
         * @brief This function returns a reference to member control_mode
         * @return Reference to member control_mode
         */
        eProsima_user_DllExport remote_msgs::ControlMode& control_mode();

        /*!
         * @brief This function sets a value in member position_longitude
         * @param _position_longitude New value for member position_longitude
         */
        eProsima_user_DllExport void position_longitude(
                float _position_longitude);

        /*!
         * @brief This function returns the value of member position_longitude
         * @return Value of member position_longitude
         */
        eProsima_user_DllExport float position_longitude() const;

        /*!
         * @brief This function returns a reference to member position_longitude
         * @return Reference to member position_longitude
         */
        eProsima_user_DllExport float& position_longitude();

        /*!
         * @brief This function sets a value in member position_latitude
         * @param _position_latitude New value for member position_latitude
         */
        eProsima_user_DllExport void position_latitude(
                float _position_latitude);

        /*!
         * @brief This function returns the value of member position_latitude
         * @return Value of member position_latitude
         */
        eProsima_user_DllExport float position_latitude() const;

        /*!
         * @brief This function returns a reference to member position_latitude
         * @return Reference to member position_latitude
         */
        eProsima_user_DllExport float& position_latitude();

        /*!
         * @brief This function sets a value in member position_altitude
         * @param _position_altitude New value for member position_altitude
         */
        eProsima_user_DllExport void position_altitude(
                float _position_altitude);

        /*!
         * @brief This function returns the value of member position_altitude
         * @return Value of member position_altitude
         */
        eProsima_user_DllExport float position_altitude() const;

        /*!
         * @brief This function returns a reference to member position_altitude
         * @return Reference to member position_altitude
         */
        eProsima_user_DllExport float& position_altitude();

        /*!
         * @brief This function sets a value in member speed
         * @param _speed New value for member speed
         */
        eProsima_user_DllExport void speed(
                float _speed);

        /*!
         * @brief This function returns the value of member speed
         * @return Value of member speed
         */
        eProsima_user_DllExport float speed() const;

        /*!
         * @brief This function returns a reference to member speed
         * @return Reference to member speed
         */
        eProsima_user_DllExport float& speed();

        /*!
         * @brief This function sets a value in member yawrate
         * @param _yawrate New value for member yawrate
         */
        eProsima_user_DllExport void yawrate(
                float _yawrate);

        /*!
         * @brief This function returns the value of member yawrate
         * @return Value of member yawrate
         */
        eProsima_user_DllExport float yawrate() const;

        /*!
         * @brief This function returns a reference to member yawrate
         * @return Reference to member yawrate
         */
        eProsima_user_DllExport float& yawrate();

        /*!
         * @brief This function sets a value in member gear_position
         * @param _gear_position New value for member gear_position
         */
        eProsima_user_DllExport void gear_position(
                float _gear_position);

        /*!
         * @brief This function returns the value of member gear_position
         * @return Value of member gear_position
         */
        eProsima_user_DllExport float gear_position() const;

        /*!
         * @brief This function returns a reference to member gear_position
         * @return Reference to member gear_position
         */
        eProsima_user_DllExport float& gear_position();

        /*!
         * @brief This function sets a value in member acceleration
         * @param _acceleration New value for member acceleration
         */
        eProsima_user_DllExport void acceleration(
                float _acceleration);

        /*!
         * @brief This function returns the value of member acceleration
         * @return Value of member acceleration
         */
        eProsima_user_DllExport float acceleration() const;

        /*!
         * @brief This function returns a reference to member acceleration
         * @return Reference to member acceleration
         */
        eProsima_user_DllExport float& acceleration();

        /*!
         * @brief This function sets a value in member heading
         * @param _heading New value for member heading
         */
        eProsima_user_DllExport void heading(
                float _heading);

        /*!
         * @brief This function returns the value of member heading
         * @return Value of member heading
         */
        eProsima_user_DllExport float heading() const;

        /*!
         * @brief This function returns a reference to member heading
         * @return Reference to member heading
         */
        eProsima_user_DllExport float& heading();

        /*!
         * @brief This function sets a value in member steering_angle
         * @param _steering_angle New value for member steering_angle
         */
        eProsima_user_DllExport void steering_angle(
                float _steering_angle);

        /*!
         * @brief This function returns the value of member steering_angle
         * @return Value of member steering_angle
         */
        eProsima_user_DllExport float steering_angle() const;

        /*!
         * @brief This function returns a reference to member steering_angle
         * @return Reference to member steering_angle
         */
        eProsima_user_DllExport float& steering_angle();

        /*!
         * @brief This function sets a value in member wheel_angle
         * @param _wheel_angle New value for member wheel_angle
         */
        eProsima_user_DllExport void wheel_angle(
                float _wheel_angle);

        /*!
         * @brief This function returns the value of member wheel_angle
         * @return Value of member wheel_angle
         */
        eProsima_user_DllExport float wheel_angle() const;

        /*!
         * @brief This function returns a reference to member wheel_angle
         * @return Reference to member wheel_angle
         */
        eProsima_user_DllExport float& wheel_angle();

        /*!
         * @brief This function sets a value in member ebrake_status
         * @param _ebrake_status New value for member ebrake_status
         */
        eProsima_user_DllExport void ebrake_status(
                int32_t _ebrake_status);

        /*!
         * @brief This function returns the value of member ebrake_status
         * @return Value of member ebrake_status
         */
        eProsima_user_DllExport int32_t ebrake_status() const;

        /*!
         * @brief This function returns a reference to member ebrake_status
         * @return Reference to member ebrake_status
         */
        eProsima_user_DllExport int32_t& ebrake_status();

        /*!
         * @brief This function sets a value in member indicator_left
         * @param _indicator_left New value for member indicator_left
         */
        eProsima_user_DllExport void indicator_left(
                int32_t _indicator_left);

        /*!
         * @brief This function returns the value of member indicator_left
         * @return Value of member indicator_left
         */
        eProsima_user_DllExport int32_t indicator_left() const;

        /*!
         * @brief This function returns a reference to member indicator_left
         * @return Reference to member indicator_left
         */
        eProsima_user_DllExport int32_t& indicator_left();

        /*!
         * @brief This function sets a value in member indicator_right
         * @param _indicator_right New value for member indicator_right
         */
        eProsima_user_DllExport void indicator_right(
                int32_t _indicator_right);

        /*!
         * @brief This function returns the value of member indicator_right
         * @return Value of member indicator_right
         */
        eProsima_user_DllExport int32_t indicator_right() const;

        /*!
         * @brief This function returns a reference to member indicator_right
         * @return Reference to member indicator_right
         */
        eProsima_user_DllExport int32_t& indicator_right();

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function sets a value in member power_mode
         * @param _power_mode New value for member power_mode
         */
        eProsima_user_DllExport void power_mode(
                remote_msgs::PowerModeType _power_mode);

        /*!
         * @brief This function returns the value of member power_mode
         * @return Value of member power_mode
         */
        eProsima_user_DllExport remote_msgs::PowerModeType power_mode() const;

        /*!
         * @brief This function returns a reference to member power_mode
         * @return Reference to member power_mode
         */
        eProsima_user_DllExport remote_msgs::PowerModeType& power_mode();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const remote_msgs::VehicleStatus& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint32_t m_vehicle_id;
        remote_msgs::ControlMode m_control_mode;
        float m_position_longitude;
        float m_position_latitude;
        float m_position_altitude;
        float m_speed;
        float m_yawrate;
        float m_gear_position;
        float m_acceleration;
        float m_heading;
        float m_steering_angle;
        float m_wheel_angle;
        int32_t m_ebrake_status;
        int32_t m_indicator_left;
        int32_t m_indicator_right;
        uint64_t m_timestamp;
        remote_msgs::PowerModeType m_power_mode;
    };
} // namespace remote_msgs

#endif // _FAST_DDS_GENERATED_REMOTE_MSGS_VEHICLESTATUS_H_