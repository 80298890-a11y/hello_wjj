// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "VehicleStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>



remote_msgs::VehicleStatus::VehicleStatus()
{
    // m_vehicle_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7dcf94f8
    m_vehicle_id = 0;
    // m_control_mode com.eprosima.idl.parser.typecode.EnumTypeCode@229f66ed
    m_control_mode = remote_msgs::Auto;
    // m_position_longitude com.eprosima.idl.parser.typecode.PrimitiveTypeCode@31190526
    m_position_longitude = 0.0;
    // m_position_latitude com.eprosima.idl.parser.typecode.PrimitiveTypeCode@662ac478
    m_position_latitude = 0.0;
    // m_position_altitude com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6743e411
    m_position_altitude = 0.0;
    // m_speed com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3eb25e1a
    m_speed = 0.0;
    // m_yawrate com.eprosima.idl.parser.typecode.PrimitiveTypeCode@477b4cdf
    m_yawrate = 0.0;
    // m_gear_position com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77c2494c
    m_gear_position = 0.0;
    // m_acceleration com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f5958c9
    m_acceleration = 0.0;
    // m_heading com.eprosima.idl.parser.typecode.PrimitiveTypeCode@233795b6
    m_heading = 0.0;
    // m_steering_angle com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3eb738bb
    m_steering_angle = 0.0;
    // m_wheel_angle com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5bda8e08
    m_wheel_angle = 0.0;
    // m_ebrake_status com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1e800aaa
    m_ebrake_status = 0;
    // m_indicator_left com.eprosima.idl.parser.typecode.PrimitiveTypeCode@185a6e9
    m_indicator_left = 0;
    // m_indicator_right com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6f03482
    m_indicator_right = 0;
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@9d5509a
    m_timestamp = 0;
    // m_power_mode com.eprosima.idl.parser.typecode.EnumTypeCode@179ece50
    m_power_mode = remote_msgs::POWERMODE_OFF;

}

remote_msgs::VehicleStatus::~VehicleStatus()
{

















}

remote_msgs::VehicleStatus::VehicleStatus(
        const VehicleStatus& x)
{
    m_vehicle_id = x.m_vehicle_id;
    m_control_mode = x.m_control_mode;
    m_position_longitude = x.m_position_longitude;
    m_position_latitude = x.m_position_latitude;
    m_position_altitude = x.m_position_altitude;
    m_speed = x.m_speed;
    m_yawrate = x.m_yawrate;
    m_gear_position = x.m_gear_position;
    m_acceleration = x.m_acceleration;
    m_heading = x.m_heading;
    m_steering_angle = x.m_steering_angle;
    m_wheel_angle = x.m_wheel_angle;
    m_ebrake_status = x.m_ebrake_status;
    m_indicator_left = x.m_indicator_left;
    m_indicator_right = x.m_indicator_right;
    m_timestamp = x.m_timestamp;
    m_power_mode = x.m_power_mode;
}

remote_msgs::VehicleStatus::VehicleStatus(
        VehicleStatus&& x)
{
    m_vehicle_id = x.m_vehicle_id;
    m_control_mode = x.m_control_mode;
    m_position_longitude = x.m_position_longitude;
    m_position_latitude = x.m_position_latitude;
    m_position_altitude = x.m_position_altitude;
    m_speed = x.m_speed;
    m_yawrate = x.m_yawrate;
    m_gear_position = x.m_gear_position;
    m_acceleration = x.m_acceleration;
    m_heading = x.m_heading;
    m_steering_angle = x.m_steering_angle;
    m_wheel_angle = x.m_wheel_angle;
    m_ebrake_status = x.m_ebrake_status;
    m_indicator_left = x.m_indicator_left;
    m_indicator_right = x.m_indicator_right;
    m_timestamp = x.m_timestamp;
    m_power_mode = x.m_power_mode;
}

remote_msgs::VehicleStatus& remote_msgs::VehicleStatus::operator =(
        const VehicleStatus& x)
{

    m_vehicle_id = x.m_vehicle_id;
    m_control_mode = x.m_control_mode;
    m_position_longitude = x.m_position_longitude;
    m_position_latitude = x.m_position_latitude;
    m_position_altitude = x.m_position_altitude;
    m_speed = x.m_speed;
    m_yawrate = x.m_yawrate;
    m_gear_position = x.m_gear_position;
    m_acceleration = x.m_acceleration;
    m_heading = x.m_heading;
    m_steering_angle = x.m_steering_angle;
    m_wheel_angle = x.m_wheel_angle;
    m_ebrake_status = x.m_ebrake_status;
    m_indicator_left = x.m_indicator_left;
    m_indicator_right = x.m_indicator_right;
    m_timestamp = x.m_timestamp;
    m_power_mode = x.m_power_mode;

    return *this;
}

remote_msgs::VehicleStatus& remote_msgs::VehicleStatus::operator =(
        VehicleStatus&& x)
{

    m_vehicle_id = x.m_vehicle_id;
    m_control_mode = x.m_control_mode;
    m_position_longitude = x.m_position_longitude;
    m_position_latitude = x.m_position_latitude;
    m_position_altitude = x.m_position_altitude;
    m_speed = x.m_speed;
    m_yawrate = x.m_yawrate;
    m_gear_position = x.m_gear_position;
    m_acceleration = x.m_acceleration;
    m_heading = x.m_heading;
    m_steering_angle = x.m_steering_angle;
    m_wheel_angle = x.m_wheel_angle;
    m_ebrake_status = x.m_ebrake_status;
    m_indicator_left = x.m_indicator_left;
    m_indicator_right = x.m_indicator_right;
    m_timestamp = x.m_timestamp;
    m_power_mode = x.m_power_mode;

    return *this;
}

bool remote_msgs::VehicleStatus::operator ==(
        const VehicleStatus& x) const
{

    return (m_vehicle_id == x.m_vehicle_id && m_control_mode == x.m_control_mode && m_position_longitude == x.m_position_longitude && m_position_latitude == x.m_position_latitude && m_position_altitude == x.m_position_altitude && m_speed == x.m_speed && m_yawrate == x.m_yawrate && m_gear_position == x.m_gear_position && m_acceleration == x.m_acceleration && m_heading == x.m_heading && m_steering_angle == x.m_steering_angle && m_wheel_angle == x.m_wheel_angle && m_ebrake_status == x.m_ebrake_status && m_indicator_left == x.m_indicator_left && m_indicator_right == x.m_indicator_right && m_timestamp == x.m_timestamp && m_power_mode == x.m_power_mode);
}

bool remote_msgs::VehicleStatus::operator !=(
        const VehicleStatus& x) const
{
    return !(*this == x);
}

size_t remote_msgs::VehicleStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t remote_msgs::VehicleStatus::getCdrSerializedSize(
        const remote_msgs::VehicleStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void remote_msgs::VehicleStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_vehicle_id;
    scdr << (uint32_t)m_control_mode;
    scdr << m_position_longitude;
    scdr << m_position_latitude;
    scdr << m_position_altitude;
    scdr << m_speed;
    scdr << m_yawrate;
    scdr << m_gear_position;
    scdr << m_acceleration;
    scdr << m_heading;
    scdr << m_steering_angle;
    scdr << m_wheel_angle;
    scdr << m_ebrake_status;
    scdr << m_indicator_left;
    scdr << m_indicator_right;
    scdr << m_timestamp;
    scdr << (uint32_t)m_power_mode;

}

void remote_msgs::VehicleStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_vehicle_id;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_control_mode = (remote_msgs::ControlMode)enum_value;
    }

    dcdr >> m_position_longitude;
    dcdr >> m_position_latitude;
    dcdr >> m_position_altitude;
    dcdr >> m_speed;
    dcdr >> m_yawrate;
    dcdr >> m_gear_position;
    dcdr >> m_acceleration;
    dcdr >> m_heading;
    dcdr >> m_steering_angle;
    dcdr >> m_wheel_angle;
    dcdr >> m_ebrake_status;
    dcdr >> m_indicator_left;
    dcdr >> m_indicator_right;
    dcdr >> m_timestamp;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_power_mode = (remote_msgs::PowerModeType)enum_value;
    }

}

/*!
 * @brief This function sets a value in member vehicle_id
 * @param _vehicle_id New value for member vehicle_id
 */
void remote_msgs::VehicleStatus::vehicle_id(
        uint32_t _vehicle_id)
{
    m_vehicle_id = _vehicle_id;
}

/*!
 * @brief This function returns the value of member vehicle_id
 * @return Value of member vehicle_id
 */
uint32_t remote_msgs::VehicleStatus::vehicle_id() const
{
    return m_vehicle_id;
}

/*!
 * @brief This function returns a reference to member vehicle_id
 * @return Reference to member vehicle_id
 */
uint32_t& remote_msgs::VehicleStatus::vehicle_id()
{
    return m_vehicle_id;
}

/*!
 * @brief This function sets a value in member control_mode
 * @param _control_mode New value for member control_mode
 */
void remote_msgs::VehicleStatus::control_mode(
        remote_msgs::ControlMode _control_mode)
{
    m_control_mode = _control_mode;
}

/*!
 * @brief This function returns the value of member control_mode
 * @return Value of member control_mode
 */
remote_msgs::ControlMode remote_msgs::VehicleStatus::control_mode() const
{
    return m_control_mode;
}

/*!
 * @brief This function returns a reference to member control_mode
 * @return Reference to member control_mode
 */
remote_msgs::ControlMode& remote_msgs::VehicleStatus::control_mode()
{
    return m_control_mode;
}

/*!
 * @brief This function sets a value in member position_longitude
 * @param _position_longitude New value for member position_longitude
 */
void remote_msgs::VehicleStatus::position_longitude(
        float _position_longitude)
{
    m_position_longitude = _position_longitude;
}

/*!
 * @brief This function returns the value of member position_longitude
 * @return Value of member position_longitude
 */
float remote_msgs::VehicleStatus::position_longitude() const
{
    return m_position_longitude;
}

/*!
 * @brief This function returns a reference to member position_longitude
 * @return Reference to member position_longitude
 */
float& remote_msgs::VehicleStatus::position_longitude()
{
    return m_position_longitude;
}

/*!
 * @brief This function sets a value in member position_latitude
 * @param _position_latitude New value for member position_latitude
 */
void remote_msgs::VehicleStatus::position_latitude(
        float _position_latitude)
{
    m_position_latitude = _position_latitude;
}

/*!
 * @brief This function returns the value of member position_latitude
 * @return Value of member position_latitude
 */
float remote_msgs::VehicleStatus::position_latitude() const
{
    return m_position_latitude;
}

/*!
 * @brief This function returns a reference to member position_latitude
 * @return Reference to member position_latitude
 */
float& remote_msgs::VehicleStatus::position_latitude()
{
    return m_position_latitude;
}

/*!
 * @brief This function sets a value in member position_altitude
 * @param _position_altitude New value for member position_altitude
 */
void remote_msgs::VehicleStatus::position_altitude(
        float _position_altitude)
{
    m_position_altitude = _position_altitude;
}

/*!
 * @brief This function returns the value of member position_altitude
 * @return Value of member position_altitude
 */
float remote_msgs::VehicleStatus::position_altitude() const
{
    return m_position_altitude;
}

/*!
 * @brief This function returns a reference to member position_altitude
 * @return Reference to member position_altitude
 */
float& remote_msgs::VehicleStatus::position_altitude()
{
    return m_position_altitude;
}

/*!
 * @brief This function sets a value in member speed
 * @param _speed New value for member speed
 */
void remote_msgs::VehicleStatus::speed(
        float _speed)
{
    m_speed = _speed;
}

/*!
 * @brief This function returns the value of member speed
 * @return Value of member speed
 */
float remote_msgs::VehicleStatus::speed() const
{
    return m_speed;
}

/*!
 * @brief This function returns a reference to member speed
 * @return Reference to member speed
 */
float& remote_msgs::VehicleStatus::speed()
{
    return m_speed;
}

/*!
 * @brief This function sets a value in member yawrate
 * @param _yawrate New value for member yawrate
 */
void remote_msgs::VehicleStatus::yawrate(
        float _yawrate)
{
    m_yawrate = _yawrate;
}

/*!
 * @brief This function returns the value of member yawrate
 * @return Value of member yawrate
 */
float remote_msgs::VehicleStatus::yawrate() const
{
    return m_yawrate;
}

/*!
 * @brief This function returns a reference to member yawrate
 * @return Reference to member yawrate
 */
float& remote_msgs::VehicleStatus::yawrate()
{
    return m_yawrate;
}

/*!
 * @brief This function sets a value in member gear_position
 * @param _gear_position New value for member gear_position
 */
void remote_msgs::VehicleStatus::gear_position(
        float _gear_position)
{
    m_gear_position = _gear_position;
}

/*!
 * @brief This function returns the value of member gear_position
 * @return Value of member gear_position
 */
float remote_msgs::VehicleStatus::gear_position() const
{
    return m_gear_position;
}

/*!
 * @brief This function returns a reference to member gear_position
 * @return Reference to member gear_position
 */
float& remote_msgs::VehicleStatus::gear_position()
{
    return m_gear_position;
}

/*!
 * @brief This function sets a value in member acceleration
 * @param _acceleration New value for member acceleration
 */
void remote_msgs::VehicleStatus::acceleration(
        float _acceleration)
{
    m_acceleration = _acceleration;
}

/*!
 * @brief This function returns the value of member acceleration
 * @return Value of member acceleration
 */
float remote_msgs::VehicleStatus::acceleration() const
{
    return m_acceleration;
}

/*!
 * @brief This function returns a reference to member acceleration
 * @return Reference to member acceleration
 */
float& remote_msgs::VehicleStatus::acceleration()
{
    return m_acceleration;
}

/*!
 * @brief This function sets a value in member heading
 * @param _heading New value for member heading
 */
void remote_msgs::VehicleStatus::heading(
        float _heading)
{
    m_heading = _heading;
}

/*!
 * @brief This function returns the value of member heading
 * @return Value of member heading
 */
float remote_msgs::VehicleStatus::heading() const
{
    return m_heading;
}

/*!
 * @brief This function returns a reference to member heading
 * @return Reference to member heading
 */
float& remote_msgs::VehicleStatus::heading()
{
    return m_heading;
}

/*!
 * @brief This function sets a value in member steering_angle
 * @param _steering_angle New value for member steering_angle
 */
void remote_msgs::VehicleStatus::steering_angle(
        float _steering_angle)
{
    m_steering_angle = _steering_angle;
}

/*!
 * @brief This function returns the value of member steering_angle
 * @return Value of member steering_angle
 */
float remote_msgs::VehicleStatus::steering_angle() const
{
    return m_steering_angle;
}

/*!
 * @brief This function returns a reference to member steering_angle
 * @return Reference to member steering_angle
 */
float& remote_msgs::VehicleStatus::steering_angle()
{
    return m_steering_angle;
}

/*!
 * @brief This function sets a value in member wheel_angle
 * @param _wheel_angle New value for member wheel_angle
 */
void remote_msgs::VehicleStatus::wheel_angle(
        float _wheel_angle)
{
    m_wheel_angle = _wheel_angle;
}

/*!
 * @brief This function returns the value of member wheel_angle
 * @return Value of member wheel_angle
 */
float remote_msgs::VehicleStatus::wheel_angle() const
{
    return m_wheel_angle;
}

/*!
 * @brief This function returns a reference to member wheel_angle
 * @return Reference to member wheel_angle
 */
float& remote_msgs::VehicleStatus::wheel_angle()
{
    return m_wheel_angle;
}

/*!
 * @brief This function sets a value in member ebrake_status
 * @param _ebrake_status New value for member ebrake_status
 */
void remote_msgs::VehicleStatus::ebrake_status(
        int32_t _ebrake_status)
{
    m_ebrake_status = _ebrake_status;
}

/*!
 * @brief This function returns the value of member ebrake_status
 * @return Value of member ebrake_status
 */
int32_t remote_msgs::VehicleStatus::ebrake_status() const
{
    return m_ebrake_status;
}

/*!
 * @brief This function returns a reference to member ebrake_status
 * @return Reference to member ebrake_status
 */
int32_t& remote_msgs::VehicleStatus::ebrake_status()
{
    return m_ebrake_status;
}

/*!
 * @brief This function sets a value in member indicator_left
 * @param _indicator_left New value for member indicator_left
 */
void remote_msgs::VehicleStatus::indicator_left(
        int32_t _indicator_left)
{
    m_indicator_left = _indicator_left;
}

/*!
 * @brief This function returns the value of member indicator_left
 * @return Value of member indicator_left
 */
int32_t remote_msgs::VehicleStatus::indicator_left() const
{
    return m_indicator_left;
}

/*!
 * @brief This function returns a reference to member indicator_left
 * @return Reference to member indicator_left
 */
int32_t& remote_msgs::VehicleStatus::indicator_left()
{
    return m_indicator_left;
}

/*!
 * @brief This function sets a value in member indicator_right
 * @param _indicator_right New value for member indicator_right
 */
void remote_msgs::VehicleStatus::indicator_right(
        int32_t _indicator_right)
{
    m_indicator_right = _indicator_right;
}

/*!
 * @brief This function returns the value of member indicator_right
 * @return Value of member indicator_right
 */
int32_t remote_msgs::VehicleStatus::indicator_right() const
{
    return m_indicator_right;
}

/*!
 * @brief This function returns a reference to member indicator_right
 * @return Reference to member indicator_right
 */
int32_t& remote_msgs::VehicleStatus::indicator_right()
{
    return m_indicator_right;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void remote_msgs::VehicleStatus::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t remote_msgs::VehicleStatus::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& remote_msgs::VehicleStatus::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member power_mode
 * @param _power_mode New value for member power_mode
 */
void remote_msgs::VehicleStatus::power_mode(
        remote_msgs::PowerModeType _power_mode)
{
    m_power_mode = _power_mode;
}

/*!
 * @brief This function returns the value of member power_mode
 * @return Value of member power_mode
 */
remote_msgs::PowerModeType remote_msgs::VehicleStatus::power_mode() const
{
    return m_power_mode;
}

/*!
 * @brief This function returns a reference to member power_mode
 * @return Reference to member power_mode
 */
remote_msgs::PowerModeType& remote_msgs::VehicleStatus::power_mode()
{
    return m_power_mode;
}


size_t remote_msgs::VehicleStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;




















    return current_align;
}

bool remote_msgs::VehicleStatus::isKeyDefined()
{
    return false;
}

void remote_msgs::VehicleStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                     
}

