// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RemoteControl.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "RemoteControl.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

remote_msgs::ControlCmd::ControlCmd()
{
    // m_steering_angle_enable com.eprosima.idl.parser.typecode.PrimitiveTypeCode@35e2d654
    m_steering_angle_enable = false;
    // m_steering_angle com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1bd4fdd
    m_steering_angle = 0.0;
    // m_target_acceleration_enable com.eprosima.idl.parser.typecode.PrimitiveTypeCode@55183b20
    m_target_acceleration_enable = false;
    // m_target_acceleration com.eprosima.idl.parser.typecode.PrimitiveTypeCode@42a48628
    m_target_acceleration = 0.0;
    // m_indicator_left_enable com.eprosima.idl.parser.typecode.PrimitiveTypeCode@293a5bf6
    m_indicator_left_enable = false;
    // m_indicator_left com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6aeb35e6
    m_indicator_left = false;
    // m_indicator_right_enable com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1283bb96
    m_indicator_right_enable = false;
    // m_indicator_right com.eprosima.idl.parser.typecode.PrimitiveTypeCode@74f0ea28
    m_indicator_right = false;
    // m_gear_position_enable com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f6efaab
    m_gear_position_enable = false;
    // m_gear_position com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3c19aaa5
    m_gear_position = 0;
    // m_ebrake_status_enable com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3349e9bb
    m_ebrake_status_enable = false;
    // m_ebrake_status com.eprosima.idl.parser.typecode.PrimitiveTypeCode@409bf450
    m_ebrake_status = 0;
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@38d8f54a
    m_timestamp = 0;

}

remote_msgs::ControlCmd::~ControlCmd()
{













}

remote_msgs::ControlCmd::ControlCmd(
        const ControlCmd& x)
{
    m_steering_angle_enable = x.m_steering_angle_enable;
    m_steering_angle = x.m_steering_angle;
    m_target_acceleration_enable = x.m_target_acceleration_enable;
    m_target_acceleration = x.m_target_acceleration;
    m_indicator_left_enable = x.m_indicator_left_enable;
    m_indicator_left = x.m_indicator_left;
    m_indicator_right_enable = x.m_indicator_right_enable;
    m_indicator_right = x.m_indicator_right;
    m_gear_position_enable = x.m_gear_position_enable;
    m_gear_position = x.m_gear_position;
    m_ebrake_status_enable = x.m_ebrake_status_enable;
    m_ebrake_status = x.m_ebrake_status;
    m_timestamp = x.m_timestamp;
}

remote_msgs::ControlCmd::ControlCmd(
        ControlCmd&& x)
{
    m_steering_angle_enable = x.m_steering_angle_enable;
    m_steering_angle = x.m_steering_angle;
    m_target_acceleration_enable = x.m_target_acceleration_enable;
    m_target_acceleration = x.m_target_acceleration;
    m_indicator_left_enable = x.m_indicator_left_enable;
    m_indicator_left = x.m_indicator_left;
    m_indicator_right_enable = x.m_indicator_right_enable;
    m_indicator_right = x.m_indicator_right;
    m_gear_position_enable = x.m_gear_position_enable;
    m_gear_position = x.m_gear_position;
    m_ebrake_status_enable = x.m_ebrake_status_enable;
    m_ebrake_status = x.m_ebrake_status;
    m_timestamp = x.m_timestamp;
}

remote_msgs::ControlCmd& remote_msgs::ControlCmd::operator =(
        const ControlCmd& x)
{

    m_steering_angle_enable = x.m_steering_angle_enable;
    m_steering_angle = x.m_steering_angle;
    m_target_acceleration_enable = x.m_target_acceleration_enable;
    m_target_acceleration = x.m_target_acceleration;
    m_indicator_left_enable = x.m_indicator_left_enable;
    m_indicator_left = x.m_indicator_left;
    m_indicator_right_enable = x.m_indicator_right_enable;
    m_indicator_right = x.m_indicator_right;
    m_gear_position_enable = x.m_gear_position_enable;
    m_gear_position = x.m_gear_position;
    m_ebrake_status_enable = x.m_ebrake_status_enable;
    m_ebrake_status = x.m_ebrake_status;
    m_timestamp = x.m_timestamp;

    return *this;
}

remote_msgs::ControlCmd& remote_msgs::ControlCmd::operator =(
        ControlCmd&& x)
{

    m_steering_angle_enable = x.m_steering_angle_enable;
    m_steering_angle = x.m_steering_angle;
    m_target_acceleration_enable = x.m_target_acceleration_enable;
    m_target_acceleration = x.m_target_acceleration;
    m_indicator_left_enable = x.m_indicator_left_enable;
    m_indicator_left = x.m_indicator_left;
    m_indicator_right_enable = x.m_indicator_right_enable;
    m_indicator_right = x.m_indicator_right;
    m_gear_position_enable = x.m_gear_position_enable;
    m_gear_position = x.m_gear_position;
    m_ebrake_status_enable = x.m_ebrake_status_enable;
    m_ebrake_status = x.m_ebrake_status;
    m_timestamp = x.m_timestamp;

    return *this;
}

bool remote_msgs::ControlCmd::operator ==(
        const ControlCmd& x) const
{

    return (m_steering_angle_enable == x.m_steering_angle_enable && m_steering_angle == x.m_steering_angle && m_target_acceleration_enable == x.m_target_acceleration_enable && m_target_acceleration == x.m_target_acceleration && m_indicator_left_enable == x.m_indicator_left_enable && m_indicator_left == x.m_indicator_left && m_indicator_right_enable == x.m_indicator_right_enable && m_indicator_right == x.m_indicator_right && m_gear_position_enable == x.m_gear_position_enable && m_gear_position == x.m_gear_position && m_ebrake_status_enable == x.m_ebrake_status_enable && m_ebrake_status == x.m_ebrake_status && m_timestamp == x.m_timestamp);
}

bool remote_msgs::ControlCmd::operator !=(
        const ControlCmd& x) const
{
    return !(*this == x);
}

size_t remote_msgs::ControlCmd::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t remote_msgs::ControlCmd::getCdrSerializedSize(
        const remote_msgs::ControlCmd& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void remote_msgs::ControlCmd::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_steering_angle_enable;
    scdr << m_steering_angle;
    scdr << m_target_acceleration_enable;
    scdr << m_target_acceleration;
    scdr << m_indicator_left_enable;
    scdr << m_indicator_left;
    scdr << m_indicator_right_enable;
    scdr << m_indicator_right;
    scdr << m_gear_position_enable;
    scdr << m_gear_position;
    scdr << m_ebrake_status_enable;
    scdr << m_ebrake_status;
    scdr << m_timestamp;

}

void remote_msgs::ControlCmd::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_steering_angle_enable;
    dcdr >> m_steering_angle;
    dcdr >> m_target_acceleration_enable;
    dcdr >> m_target_acceleration;
    dcdr >> m_indicator_left_enable;
    dcdr >> m_indicator_left;
    dcdr >> m_indicator_right_enable;
    dcdr >> m_indicator_right;
    dcdr >> m_gear_position_enable;
    dcdr >> m_gear_position;
    dcdr >> m_ebrake_status_enable;
    dcdr >> m_ebrake_status;
    dcdr >> m_timestamp;
}

/*!
 * @brief This function sets a value in member steering_angle_enable
 * @param _steering_angle_enable New value for member steering_angle_enable
 */
void remote_msgs::ControlCmd::steering_angle_enable(
        bool _steering_angle_enable)
{
    m_steering_angle_enable = _steering_angle_enable;
}

/*!
 * @brief This function returns the value of member steering_angle_enable
 * @return Value of member steering_angle_enable
 */
bool remote_msgs::ControlCmd::steering_angle_enable() const
{
    return m_steering_angle_enable;
}

/*!
 * @brief This function returns a reference to member steering_angle_enable
 * @return Reference to member steering_angle_enable
 */
bool& remote_msgs::ControlCmd::steering_angle_enable()
{
    return m_steering_angle_enable;
}

/*!
 * @brief This function sets a value in member steering_angle
 * @param _steering_angle New value for member steering_angle
 */
void remote_msgs::ControlCmd::steering_angle(
        float _steering_angle)
{
    m_steering_angle = _steering_angle;
}

/*!
 * @brief This function returns the value of member steering_angle
 * @return Value of member steering_angle
 */
float remote_msgs::ControlCmd::steering_angle() const
{
    return m_steering_angle;
}

/*!
 * @brief This function returns a reference to member steering_angle
 * @return Reference to member steering_angle
 */
float& remote_msgs::ControlCmd::steering_angle()
{
    return m_steering_angle;
}

/*!
 * @brief This function sets a value in member target_acceleration_enable
 * @param _target_acceleration_enable New value for member target_acceleration_enable
 */
void remote_msgs::ControlCmd::target_acceleration_enable(
        bool _target_acceleration_enable)
{
    m_target_acceleration_enable = _target_acceleration_enable;
}

/*!
 * @brief This function returns the value of member target_acceleration_enable
 * @return Value of member target_acceleration_enable
 */
bool remote_msgs::ControlCmd::target_acceleration_enable() const
{
    return m_target_acceleration_enable;
}

/*!
 * @brief This function returns a reference to member target_acceleration_enable
 * @return Reference to member target_acceleration_enable
 */
bool& remote_msgs::ControlCmd::target_acceleration_enable()
{
    return m_target_acceleration_enable;
}

/*!
 * @brief This function sets a value in member target_acceleration
 * @param _target_acceleration New value for member target_acceleration
 */
void remote_msgs::ControlCmd::target_acceleration(
        float _target_acceleration)
{
    m_target_acceleration = _target_acceleration;
}

/*!
 * @brief This function returns the value of member target_acceleration
 * @return Value of member target_acceleration
 */
float remote_msgs::ControlCmd::target_acceleration() const
{
    return m_target_acceleration;
}

/*!
 * @brief This function returns a reference to member target_acceleration
 * @return Reference to member target_acceleration
 */
float& remote_msgs::ControlCmd::target_acceleration()
{
    return m_target_acceleration;
}

/*!
 * @brief This function sets a value in member indicator_left_enable
 * @param _indicator_left_enable New value for member indicator_left_enable
 */
void remote_msgs::ControlCmd::indicator_left_enable(
        bool _indicator_left_enable)
{
    m_indicator_left_enable = _indicator_left_enable;
}

/*!
 * @brief This function returns the value of member indicator_left_enable
 * @return Value of member indicator_left_enable
 */
bool remote_msgs::ControlCmd::indicator_left_enable() const
{
    return m_indicator_left_enable;
}

/*!
 * @brief This function returns a reference to member indicator_left_enable
 * @return Reference to member indicator_left_enable
 */
bool& remote_msgs::ControlCmd::indicator_left_enable()
{
    return m_indicator_left_enable;
}

/*!
 * @brief This function sets a value in member indicator_left
 * @param _indicator_left New value for member indicator_left
 */
void remote_msgs::ControlCmd::indicator_left(
        bool _indicator_left)
{
    m_indicator_left = _indicator_left;
}

/*!
 * @brief This function returns the value of member indicator_left
 * @return Value of member indicator_left
 */
bool remote_msgs::ControlCmd::indicator_left() const
{
    return m_indicator_left;
}

/*!
 * @brief This function returns a reference to member indicator_left
 * @return Reference to member indicator_left
 */
bool& remote_msgs::ControlCmd::indicator_left()
{
    return m_indicator_left;
}

/*!
 * @brief This function sets a value in member indicator_right_enable
 * @param _indicator_right_enable New value for member indicator_right_enable
 */
void remote_msgs::ControlCmd::indicator_right_enable(
        bool _indicator_right_enable)
{
    m_indicator_right_enable = _indicator_right_enable;
}

/*!
 * @brief This function returns the value of member indicator_right_enable
 * @return Value of member indicator_right_enable
 */
bool remote_msgs::ControlCmd::indicator_right_enable() const
{
    return m_indicator_right_enable;
}

/*!
 * @brief This function returns a reference to member indicator_right_enable
 * @return Reference to member indicator_right_enable
 */
bool& remote_msgs::ControlCmd::indicator_right_enable()
{
    return m_indicator_right_enable;
}

/*!
 * @brief This function sets a value in member indicator_right
 * @param _indicator_right New value for member indicator_right
 */
void remote_msgs::ControlCmd::indicator_right(
        bool _indicator_right)
{
    m_indicator_right = _indicator_right;
}

/*!
 * @brief This function returns the value of member indicator_right
 * @return Value of member indicator_right
 */
bool remote_msgs::ControlCmd::indicator_right() const
{
    return m_indicator_right;
}

/*!
 * @brief This function returns a reference to member indicator_right
 * @return Reference to member indicator_right
 */
bool& remote_msgs::ControlCmd::indicator_right()
{
    return m_indicator_right;
}

/*!
 * @brief This function sets a value in member gear_position_enable
 * @param _gear_position_enable New value for member gear_position_enable
 */
void remote_msgs::ControlCmd::gear_position_enable(
        bool _gear_position_enable)
{
    m_gear_position_enable = _gear_position_enable;
}

/*!
 * @brief This function returns the value of member gear_position_enable
 * @return Value of member gear_position_enable
 */
bool remote_msgs::ControlCmd::gear_position_enable() const
{
    return m_gear_position_enable;
}

/*!
 * @brief This function returns a reference to member gear_position_enable
 * @return Reference to member gear_position_enable
 */
bool& remote_msgs::ControlCmd::gear_position_enable()
{
    return m_gear_position_enable;
}

/*!
 * @brief This function sets a value in member gear_position
 * @param _gear_position New value for member gear_position
 */
void remote_msgs::ControlCmd::gear_position(
        int32_t _gear_position)
{
    m_gear_position = _gear_position;
}

/*!
 * @brief This function returns the value of member gear_position
 * @return Value of member gear_position
 */
int32_t remote_msgs::ControlCmd::gear_position() const
{
    return m_gear_position;
}

/*!
 * @brief This function returns a reference to member gear_position
 * @return Reference to member gear_position
 */
int32_t& remote_msgs::ControlCmd::gear_position()
{
    return m_gear_position;
}

/*!
 * @brief This function sets a value in member ebrake_status_enable
 * @param _ebrake_status_enable New value for member ebrake_status_enable
 */
void remote_msgs::ControlCmd::ebrake_status_enable(
        bool _ebrake_status_enable)
{
    m_ebrake_status_enable = _ebrake_status_enable;
}

/*!
 * @brief This function returns the value of member ebrake_status_enable
 * @return Value of member ebrake_status_enable
 */
bool remote_msgs::ControlCmd::ebrake_status_enable() const
{
    return m_ebrake_status_enable;
}

/*!
 * @brief This function returns a reference to member ebrake_status_enable
 * @return Reference to member ebrake_status_enable
 */
bool& remote_msgs::ControlCmd::ebrake_status_enable()
{
    return m_ebrake_status_enable;
}

/*!
 * @brief This function sets a value in member ebrake_status
 * @param _ebrake_status New value for member ebrake_status
 */
void remote_msgs::ControlCmd::ebrake_status(
        int32_t _ebrake_status)
{
    m_ebrake_status = _ebrake_status;
}

/*!
 * @brief This function returns the value of member ebrake_status
 * @return Value of member ebrake_status
 */
int32_t remote_msgs::ControlCmd::ebrake_status() const
{
    return m_ebrake_status;
}

/*!
 * @brief This function returns a reference to member ebrake_status
 * @return Reference to member ebrake_status
 */
int32_t& remote_msgs::ControlCmd::ebrake_status()
{
    return m_ebrake_status;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void remote_msgs::ControlCmd::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t remote_msgs::ControlCmd::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& remote_msgs::ControlCmd::timestamp()
{
    return m_timestamp;
}


size_t remote_msgs::ControlCmd::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;
















    return current_align;
}

bool remote_msgs::ControlCmd::isKeyDefined()
{
    return false;
}

void remote_msgs::ControlCmd::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                 
}

