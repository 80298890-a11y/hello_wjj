// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Handshake.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Handshake.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

remote_msgs::HandshakeRequest::HandshakeRequest()
{
    // m_noa_active_request com.eprosima.idl.parser.typecode.PrimitiveTypeCode@35e2d654
    m_noa_active_request = 0;
    // m_remote_override_status com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1bd4fdd
    m_remote_override_status = 0;
    // m_remote_override_ready com.eprosima.idl.parser.typecode.PrimitiveTypeCode@55183b20
    m_remote_override_ready = 0;
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4f83df68
    m_timestamp = 0;

}

remote_msgs::HandshakeRequest::~HandshakeRequest()
{




}

remote_msgs::HandshakeRequest::HandshakeRequest(
        const HandshakeRequest& x)
{
    m_noa_active_request = x.m_noa_active_request;
    m_remote_override_status = x.m_remote_override_status;
    m_remote_override_ready = x.m_remote_override_ready;
    m_timestamp = x.m_timestamp;
}

remote_msgs::HandshakeRequest::HandshakeRequest(
        HandshakeRequest&& x)
{
    m_noa_active_request = x.m_noa_active_request;
    m_remote_override_status = x.m_remote_override_status;
    m_remote_override_ready = x.m_remote_override_ready;
    m_timestamp = x.m_timestamp;
}

remote_msgs::HandshakeRequest& remote_msgs::HandshakeRequest::operator =(
        const HandshakeRequest& x)
{

    m_noa_active_request = x.m_noa_active_request;
    m_remote_override_status = x.m_remote_override_status;
    m_remote_override_ready = x.m_remote_override_ready;
    m_timestamp = x.m_timestamp;

    return *this;
}

remote_msgs::HandshakeRequest& remote_msgs::HandshakeRequest::operator =(
        HandshakeRequest&& x)
{

    m_noa_active_request = x.m_noa_active_request;
    m_remote_override_status = x.m_remote_override_status;
    m_remote_override_ready = x.m_remote_override_ready;
    m_timestamp = x.m_timestamp;

    return *this;
}

bool remote_msgs::HandshakeRequest::operator ==(
        const HandshakeRequest& x) const
{

    return (m_noa_active_request == x.m_noa_active_request && m_remote_override_status == x.m_remote_override_status && m_remote_override_ready == x.m_remote_override_ready && m_timestamp == x.m_timestamp);
}

bool remote_msgs::HandshakeRequest::operator !=(
        const HandshakeRequest& x) const
{
    return !(*this == x);
}

size_t remote_msgs::HandshakeRequest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t remote_msgs::HandshakeRequest::getCdrSerializedSize(
        const remote_msgs::HandshakeRequest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void remote_msgs::HandshakeRequest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_noa_active_request;
    scdr << m_remote_override_status;
    scdr << m_remote_override_ready;
    scdr << m_timestamp;

}

void remote_msgs::HandshakeRequest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_noa_active_request;
    dcdr >> m_remote_override_status;
    dcdr >> m_remote_override_ready;
    dcdr >> m_timestamp;
}

/*!
 * @brief This function sets a value in member noa_active_request
 * @param _noa_active_request New value for member noa_active_request
 */
void remote_msgs::HandshakeRequest::noa_active_request(
        int32_t _noa_active_request)
{
    m_noa_active_request = _noa_active_request;
}

/*!
 * @brief This function returns the value of member noa_active_request
 * @return Value of member noa_active_request
 */
int32_t remote_msgs::HandshakeRequest::noa_active_request() const
{
    return m_noa_active_request;
}

/*!
 * @brief This function returns a reference to member noa_active_request
 * @return Reference to member noa_active_request
 */
int32_t& remote_msgs::HandshakeRequest::noa_active_request()
{
    return m_noa_active_request;
}

/*!
 * @brief This function sets a value in member remote_override_status
 * @param _remote_override_status New value for member remote_override_status
 */
void remote_msgs::HandshakeRequest::remote_override_status(
        int32_t _remote_override_status)
{
    m_remote_override_status = _remote_override_status;
}

/*!
 * @brief This function returns the value of member remote_override_status
 * @return Value of member remote_override_status
 */
int32_t remote_msgs::HandshakeRequest::remote_override_status() const
{
    return m_remote_override_status;
}

/*!
 * @brief This function returns a reference to member remote_override_status
 * @return Reference to member remote_override_status
 */
int32_t& remote_msgs::HandshakeRequest::remote_override_status()
{
    return m_remote_override_status;
}

/*!
 * @brief This function sets a value in member remote_override_ready
 * @param _remote_override_ready New value for member remote_override_ready
 */
void remote_msgs::HandshakeRequest::remote_override_ready(
        int32_t _remote_override_ready)
{
    m_remote_override_ready = _remote_override_ready;
}

/*!
 * @brief This function returns the value of member remote_override_ready
 * @return Value of member remote_override_ready
 */
int32_t remote_msgs::HandshakeRequest::remote_override_ready() const
{
    return m_remote_override_ready;
}

/*!
 * @brief This function returns a reference to member remote_override_ready
 * @return Reference to member remote_override_ready
 */
int32_t& remote_msgs::HandshakeRequest::remote_override_ready()
{
    return m_remote_override_ready;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void remote_msgs::HandshakeRequest::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t remote_msgs::HandshakeRequest::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& remote_msgs::HandshakeRequest::timestamp()
{
    return m_timestamp;
}


size_t remote_msgs::HandshakeRequest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool remote_msgs::HandshakeRequest::isKeyDefined()
{
    return false;
}

void remote_msgs::HandshakeRequest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}

remote_msgs::HandshakeResponse::HandshakeResponse()
{
    // m_noa_active_response com.eprosima.idl.parser.typecode.PrimitiveTypeCode@35d019a3
    m_noa_active_response = 0;
    // m_remote_override_response com.eprosima.idl.parser.typecode.PrimitiveTypeCode@689604d9
    m_remote_override_response = 0;
    // m_current_control_source com.eprosima.idl.parser.typecode.PrimitiveTypeCode@18078bef
    m_current_control_source = false;
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@799f10e1
    m_timestamp = 0;

}

remote_msgs::HandshakeResponse::~HandshakeResponse()
{




}

remote_msgs::HandshakeResponse::HandshakeResponse(
        const HandshakeResponse& x)
{
    m_noa_active_response = x.m_noa_active_response;
    m_remote_override_response = x.m_remote_override_response;
    m_current_control_source = x.m_current_control_source;
    m_timestamp = x.m_timestamp;
}

remote_msgs::HandshakeResponse::HandshakeResponse(
        HandshakeResponse&& x)
{
    m_noa_active_response = x.m_noa_active_response;
    m_remote_override_response = x.m_remote_override_response;
    m_current_control_source = x.m_current_control_source;
    m_timestamp = x.m_timestamp;
}

remote_msgs::HandshakeResponse& remote_msgs::HandshakeResponse::operator =(
        const HandshakeResponse& x)
{

    m_noa_active_response = x.m_noa_active_response;
    m_remote_override_response = x.m_remote_override_response;
    m_current_control_source = x.m_current_control_source;
    m_timestamp = x.m_timestamp;

    return *this;
}

remote_msgs::HandshakeResponse& remote_msgs::HandshakeResponse::operator =(
        HandshakeResponse&& x)
{

    m_noa_active_response = x.m_noa_active_response;
    m_remote_override_response = x.m_remote_override_response;
    m_current_control_source = x.m_current_control_source;
    m_timestamp = x.m_timestamp;

    return *this;
}

bool remote_msgs::HandshakeResponse::operator ==(
        const HandshakeResponse& x) const
{

    return (m_noa_active_response == x.m_noa_active_response && m_remote_override_response == x.m_remote_override_response && m_current_control_source == x.m_current_control_source && m_timestamp == x.m_timestamp);
}

bool remote_msgs::HandshakeResponse::operator !=(
        const HandshakeResponse& x) const
{
    return !(*this == x);
}

size_t remote_msgs::HandshakeResponse::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t remote_msgs::HandshakeResponse::getCdrSerializedSize(
        const remote_msgs::HandshakeResponse& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void remote_msgs::HandshakeResponse::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_noa_active_response;
    scdr << m_remote_override_response;
    scdr << m_current_control_source;
    scdr << m_timestamp;

}

void remote_msgs::HandshakeResponse::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_noa_active_response;
    dcdr >> m_remote_override_response;
    dcdr >> m_current_control_source;
    dcdr >> m_timestamp;
}

/*!
 * @brief This function sets a value in member noa_active_response
 * @param _noa_active_response New value for member noa_active_response
 */
void remote_msgs::HandshakeResponse::noa_active_response(
        int32_t _noa_active_response)
{
    m_noa_active_response = _noa_active_response;
}

/*!
 * @brief This function returns the value of member noa_active_response
 * @return Value of member noa_active_response
 */
int32_t remote_msgs::HandshakeResponse::noa_active_response() const
{
    return m_noa_active_response;
}

/*!
 * @brief This function returns a reference to member noa_active_response
 * @return Reference to member noa_active_response
 */
int32_t& remote_msgs::HandshakeResponse::noa_active_response()
{
    return m_noa_active_response;
}

/*!
 * @brief This function sets a value in member remote_override_response
 * @param _remote_override_response New value for member remote_override_response
 */
void remote_msgs::HandshakeResponse::remote_override_response(
        int32_t _remote_override_response)
{
    m_remote_override_response = _remote_override_response;
}

/*!
 * @brief This function returns the value of member remote_override_response
 * @return Value of member remote_override_response
 */
int32_t remote_msgs::HandshakeResponse::remote_override_response() const
{
    return m_remote_override_response;
}

/*!
 * @brief This function returns a reference to member remote_override_response
 * @return Reference to member remote_override_response
 */
int32_t& remote_msgs::HandshakeResponse::remote_override_response()
{
    return m_remote_override_response;
}

/*!
 * @brief This function sets a value in member current_control_source
 * @param _current_control_source New value for member current_control_source
 */
void remote_msgs::HandshakeResponse::current_control_source(
        bool _current_control_source)
{
    m_current_control_source = _current_control_source;
}

/*!
 * @brief This function returns the value of member current_control_source
 * @return Value of member current_control_source
 */
bool remote_msgs::HandshakeResponse::current_control_source() const
{
    return m_current_control_source;
}

/*!
 * @brief This function returns a reference to member current_control_source
 * @return Reference to member current_control_source
 */
bool& remote_msgs::HandshakeResponse::current_control_source()
{
    return m_current_control_source;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void remote_msgs::HandshakeResponse::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t remote_msgs::HandshakeResponse::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& remote_msgs::HandshakeResponse::timestamp()
{
    return m_timestamp;
}


size_t remote_msgs::HandshakeResponse::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool remote_msgs::HandshakeResponse::isKeyDefined()
{
    return false;
}

void remote_msgs::HandshakeResponse::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}

