// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RemoteControl.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_REMOTE_MSGS_REMOTECONTROL_H_
#define _FAST_DDS_GENERATED_REMOTE_MSGS_REMOTECONTROL_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(RemoteControl_SOURCE)
#define RemoteControl_DllAPI __declspec( dllexport )
#else
#define RemoteControl_DllAPI __declspec( dllimport )
#endif // RemoteControl_SOURCE
#else
#define RemoteControl_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define RemoteControl_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace remote_msgs {
    /*!
     * @brief This class represents the structure ControlCmd defined by the user in the IDL file.
     * @ingroup REMOTECONTROL
     */
    class ControlCmd
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ControlCmd();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ControlCmd();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object remote_msgs::ControlCmd that will be copied.
         */
        eProsima_user_DllExport ControlCmd(
                const ControlCmd& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object remote_msgs::ControlCmd that will be copied.
         */
        eProsima_user_DllExport ControlCmd(
                ControlCmd&& x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object remote_msgs::ControlCmd that will be copied.
         */
        eProsima_user_DllExport ControlCmd& operator =(
                const ControlCmd& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object remote_msgs::ControlCmd that will be copied.
         */
        eProsima_user_DllExport ControlCmd& operator =(
                ControlCmd&& x);

        /*!
         * @brief Comparison operator.
         * @param x remote_msgs::ControlCmd object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ControlCmd& x) const;

        /*!
         * @brief Comparison operator.
         * @param x remote_msgs::ControlCmd object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ControlCmd& x) const;

        /*!
         * @brief This function sets a value in member steering_angle_enable
         * @param _steering_angle_enable New value for member steering_angle_enable
         */
        eProsima_user_DllExport void steering_angle_enable(
                bool _steering_angle_enable);

        /*!
         * @brief This function returns the value of member steering_angle_enable
         * @return Value of member steering_angle_enable
         */
        eProsima_user_DllExport bool steering_angle_enable() const;

        /*!
         * @brief This function returns a reference to member steering_angle_enable
         * @return Reference to member steering_angle_enable
         */
        eProsima_user_DllExport bool& steering_angle_enable();

        /*!
         * @brief This function sets a value in member steering_angle
         * @param _steering_angle New value for member steering_angle
         */
        eProsima_user_DllExport void steering_angle(
                float _steering_angle);

        /*!
         * @brief This function returns the value of member steering_angle
         * @return Value of member steering_angle
         */
        eProsima_user_DllExport float steering_angle() const;

        /*!
         * @brief This function returns a reference to member steering_angle
         * @return Reference to member steering_angle
         */
        eProsima_user_DllExport float& steering_angle();

        /*!
         * @brief This function sets a value in member target_acceleration_enable
         * @param _target_acceleration_enable New value for member target_acceleration_enable
         */
        eProsima_user_DllExport void target_acceleration_enable(
                bool _target_acceleration_enable);

        /*!
         * @brief This function returns the value of member target_acceleration_enable
         * @return Value of member target_acceleration_enable
         */
        eProsima_user_DllExport bool target_acceleration_enable() const;

        /*!
         * @brief This function returns a reference to member target_acceleration_enable
         * @return Reference to member target_acceleration_enable
         */
        eProsima_user_DllExport bool& target_acceleration_enable();

        /*!
         * @brief This function sets a value in member target_acceleration
         * @param _target_acceleration New value for member target_acceleration
         */
        eProsima_user_DllExport void target_acceleration(
                float _target_acceleration);

        /*!
         * @brief This function returns the value of member target_acceleration
         * @return Value of member target_acceleration
         */
        eProsima_user_DllExport float target_acceleration() const;

        /*!
         * @brief This function returns a reference to member target_acceleration
         * @return Reference to member target_acceleration
         */
        eProsima_user_DllExport float& target_acceleration();

        /*!
         * @brief This function sets a value in member indicator_left_enable
         * @param _indicator_left_enable New value for member indicator_left_enable
         */
        eProsima_user_DllExport void indicator_left_enable(
                bool _indicator_left_enable);

        /*!
         * @brief This function returns the value of member indicator_left_enable
         * @return Value of member indicator_left_enable
         */
        eProsima_user_DllExport bool indicator_left_enable() const;

        /*!
         * @brief This function returns a reference to member indicator_left_enable
         * @return Reference to member indicator_left_enable
         */
        eProsima_user_DllExport bool& indicator_left_enable();

        /*!
         * @brief This function sets a value in member indicator_left
         * @param _indicator_left New value for member indicator_left
         */
        eProsima_user_DllExport void indicator_left(
                bool _indicator_left);

        /*!
         * @brief This function returns the value of member indicator_left
         * @return Value of member indicator_left
         */
        eProsima_user_DllExport bool indicator_left() const;

        /*!
         * @brief This function returns a reference to member indicator_left
         * @return Reference to member indicator_left
         */
        eProsima_user_DllExport bool& indicator_left();

        /*!
         * @brief This function sets a value in member indicator_right_enable
         * @param _indicator_right_enable New value for member indicator_right_enable
         */
        eProsima_user_DllExport void indicator_right_enable(
                bool _indicator_right_enable);

        /*!
         * @brief This function returns the value of member indicator_right_enable
         * @return Value of member indicator_right_enable
         */
        eProsima_user_DllExport bool indicator_right_enable() const;

        /*!
         * @brief This function returns a reference to member indicator_right_enable
         * @return Reference to member indicator_right_enable
         */
        eProsima_user_DllExport bool& indicator_right_enable();

        /*!
         * @brief This function sets a value in member indicator_right
         * @param _indicator_right New value for member indicator_right
         */
        eProsima_user_DllExport void indicator_right(
                bool _indicator_right);

        /*!
         * @brief This function returns the value of member indicator_right
         * @return Value of member indicator_right
         */
        eProsima_user_DllExport bool indicator_right() const;

        /*!
         * @brief This function returns a reference to member indicator_right
         * @return Reference to member indicator_right
         */
        eProsima_user_DllExport bool& indicator_right();

        /*!
         * @brief This function sets a value in member gear_position_enable
         * @param _gear_position_enable New value for member gear_position_enable
         */
        eProsima_user_DllExport void gear_position_enable(
                bool _gear_position_enable);

        /*!
         * @brief This function returns the value of member gear_position_enable
         * @return Value of member gear_position_enable
         */
        eProsima_user_DllExport bool gear_position_enable() const;

        /*!
         * @brief This function returns a reference to member gear_position_enable
         * @return Reference to member gear_position_enable
         */
        eProsima_user_DllExport bool& gear_position_enable();

        /*!
         * @brief This function sets a value in member gear_position
         * @param _gear_position New value for member gear_position
         */
        eProsima_user_DllExport void gear_position(
                int32_t _gear_position);

        /*!
         * @brief This function returns the value of member gear_position
         * @return Value of member gear_position
         */
        eProsima_user_DllExport int32_t gear_position() const;

        /*!
         * @brief This function returns a reference to member gear_position
         * @return Reference to member gear_position
         */
        eProsima_user_DllExport int32_t& gear_position();

        /*!
         * @brief This function sets a value in member ebrake_status_enable
         * @param _ebrake_status_enable New value for member ebrake_status_enable
         */
        eProsima_user_DllExport void ebrake_status_enable(
                bool _ebrake_status_enable);

        /*!
         * @brief This function returns the value of member ebrake_status_enable
         * @return Value of member ebrake_status_enable
         */
        eProsima_user_DllExport bool ebrake_status_enable() const;

        /*!
         * @brief This function returns a reference to member ebrake_status_enable
         * @return Reference to member ebrake_status_enable
         */
        eProsima_user_DllExport bool& ebrake_status_enable();

        /*!
         * @brief This function sets a value in member ebrake_status
         * @param _ebrake_status New value for member ebrake_status
         */
        eProsima_user_DllExport void ebrake_status(
                int32_t _ebrake_status);

        /*!
         * @brief This function returns the value of member ebrake_status
         * @return Value of member ebrake_status
         */
        eProsima_user_DllExport int32_t ebrake_status() const;

        /*!
         * @brief This function returns a reference to member ebrake_status
         * @return Reference to member ebrake_status
         */
        eProsima_user_DllExport int32_t& ebrake_status();

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const remote_msgs::ControlCmd& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        bool m_steering_angle_enable;
        float m_steering_angle;
        bool m_target_acceleration_enable;
        float m_target_acceleration;
        bool m_indicator_left_enable;
        bool m_indicator_left;
        bool m_indicator_right_enable;
        bool m_indicator_right;
        bool m_gear_position_enable;
        int32_t m_gear_position;
        bool m_ebrake_status_enable;
        int32_t m_ebrake_status;
        uint64_t m_timestamp;
    };
} // namespace remote_msgs

#endif // _FAST_DDS_GENERATED_REMOTE_MSGS_REMOTECONTROL_H_