// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Handshake.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_REMOTE_MSGS_HANDSHAKE_H_
#define _FAST_DDS_GENERATED_REMOTE_MSGS_HANDSHAKE_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Handshake_SOURCE)
#define Handshake_DllAPI __declspec( dllexport )
#else
#define Handshake_DllAPI __declspec( dllimport )
#endif // Handshake_SOURCE
#else
#define Handshake_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Handshake_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace remote_msgs {
    /*!
     * @brief This class represents the structure HandshakeRequest defined by the user in the IDL file.
     * @ingroup HANDSHAKE
     */
    class HandshakeRequest
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport HandshakeRequest();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~HandshakeRequest();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object remote_msgs::HandshakeRequest that will be copied.
         */
        eProsima_user_DllExport HandshakeRequest(
                const HandshakeRequest& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object remote_msgs::HandshakeRequest that will be copied.
         */
        eProsima_user_DllExport HandshakeRequest(
                HandshakeRequest&& x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object remote_msgs::HandshakeRequest that will be copied.
         */
        eProsima_user_DllExport HandshakeRequest& operator =(
                const HandshakeRequest& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object remote_msgs::HandshakeRequest that will be copied.
         */
        eProsima_user_DllExport HandshakeRequest& operator =(
                HandshakeRequest&& x);

        /*!
         * @brief Comparison operator.
         * @param x remote_msgs::HandshakeRequest object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const HandshakeRequest& x) const;

        /*!
         * @brief Comparison operator.
         * @param x remote_msgs::HandshakeRequest object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const HandshakeRequest& x) const;

        /*!
         * @brief This function sets a value in member noa_active_request
         * @param _noa_active_request New value for member noa_active_request
         */
        eProsima_user_DllExport void noa_active_request(
                int32_t _noa_active_request);

        /*!
         * @brief This function returns the value of member noa_active_request
         * @return Value of member noa_active_request
         */
        eProsima_user_DllExport int32_t noa_active_request() const;

        /*!
         * @brief This function returns a reference to member noa_active_request
         * @return Reference to member noa_active_request
         */
        eProsima_user_DllExport int32_t& noa_active_request();

        /*!
         * @brief This function sets a value in member remote_override_status
         * @param _remote_override_status New value for member remote_override_status
         */
        eProsima_user_DllExport void remote_override_status(
                int32_t _remote_override_status);

        /*!
         * @brief This function returns the value of member remote_override_status
         * @return Value of member remote_override_status
         */
        eProsima_user_DllExport int32_t remote_override_status() const;

        /*!
         * @brief This function returns a reference to member remote_override_status
         * @return Reference to member remote_override_status
         */
        eProsima_user_DllExport int32_t& remote_override_status();

        /*!
         * @brief This function sets a value in member remote_override_ready
         * @param _remote_override_ready New value for member remote_override_ready
         */
        eProsima_user_DllExport void remote_override_ready(
                int32_t _remote_override_ready);

        /*!
         * @brief This function returns the value of member remote_override_ready
         * @return Value of member remote_override_ready
         */
        eProsima_user_DllExport int32_t remote_override_ready() const;

        /*!
         * @brief This function returns a reference to member remote_override_ready
         * @return Reference to member remote_override_ready
         */
        eProsima_user_DllExport int32_t& remote_override_ready();

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const remote_msgs::HandshakeRequest& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int32_t m_noa_active_request;
        int32_t m_remote_override_status;
        int32_t m_remote_override_ready;
        uint64_t m_timestamp;
    };
    /*!
     * @brief This class represents the structure HandshakeResponse defined by the user in the IDL file.
     * @ingroup HANDSHAKE
     */
    class HandshakeResponse
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport HandshakeResponse();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~HandshakeResponse();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object remote_msgs::HandshakeResponse that will be copied.
         */
        eProsima_user_DllExport HandshakeResponse(
                const HandshakeResponse& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object remote_msgs::HandshakeResponse that will be copied.
         */
        eProsima_user_DllExport HandshakeResponse(
                HandshakeResponse&& x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object remote_msgs::HandshakeResponse that will be copied.
         */
        eProsima_user_DllExport HandshakeResponse& operator =(
                const HandshakeResponse& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object remote_msgs::HandshakeResponse that will be copied.
         */
        eProsima_user_DllExport HandshakeResponse& operator =(
                HandshakeResponse&& x);

        /*!
         * @brief Comparison operator.
         * @param x remote_msgs::HandshakeResponse object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const HandshakeResponse& x) const;

        /*!
         * @brief Comparison operator.
         * @param x remote_msgs::HandshakeResponse object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const HandshakeResponse& x) const;

        /*!
         * @brief This function sets a value in member noa_active_response
         * @param _noa_active_response New value for member noa_active_response
         */
        eProsima_user_DllExport void noa_active_response(
                int32_t _noa_active_response);

        /*!
         * @brief This function returns the value of member noa_active_response
         * @return Value of member noa_active_response
         */
        eProsima_user_DllExport int32_t noa_active_response() const;

        /*!
         * @brief This function returns a reference to member noa_active_response
         * @return Reference to member noa_active_response
         */
        eProsima_user_DllExport int32_t& noa_active_response();

        /*!
         * @brief This function sets a value in member remote_override_response
         * @param _remote_override_response New value for member remote_override_response
         */
        eProsima_user_DllExport void remote_override_response(
                int32_t _remote_override_response);

        /*!
         * @brief This function returns the value of member remote_override_response
         * @return Value of member remote_override_response
         */
        eProsima_user_DllExport int32_t remote_override_response() const;

        /*!
         * @brief This function returns a reference to member remote_override_response
         * @return Reference to member remote_override_response
         */
        eProsima_user_DllExport int32_t& remote_override_response();

        /*!
         * @brief This function sets a value in member current_control_source
         * @param _current_control_source New value for member current_control_source
         */
        eProsima_user_DllExport void current_control_source(
                bool _current_control_source);

        /*!
         * @brief This function returns the value of member current_control_source
         * @return Value of member current_control_source
         */
        eProsima_user_DllExport bool current_control_source() const;

        /*!
         * @brief This function returns a reference to member current_control_source
         * @return Reference to member current_control_source
         */
        eProsima_user_DllExport bool& current_control_source();

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const remote_msgs::HandshakeResponse& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int32_t m_noa_active_response;
        int32_t m_remote_override_response;
        bool m_current_control_source;
        uint64_t m_timestamp;
    };
} // namespace remote_msgs

#endif // _FAST_DDS_GENERATED_REMOTE_MSGS_HANDSHAKE_H_