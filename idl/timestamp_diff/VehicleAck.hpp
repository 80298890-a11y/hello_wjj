// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleAck.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__VEHICLEACK_HPP
#define FAST_DDS_GENERATED__VEHICLEACK_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VEHICLEACK_SOURCE)
#define VEHICLEACK_DllAPI __declspec( dllexport )
#else
#define VEHICLEACK_DllAPI __declspec( dllimport )
#endif // VEHICLEACK_SOURCE
#else
#define VEHICLEACK_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define VEHICLEACK_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure VehicleAck defined by the user in the IDL file.
 * @ingroup VehicleAck
 */
class VehicleAck
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport VehicleAck()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~VehicleAck()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VehicleAck that will be copied.
     */
    eProsima_user_DllExport VehicleAck(
            const VehicleAck& x)
    {
                    m_sequence_id = x.m_sequence_id;

                    m_status = x.m_status;

                    m_steering_angle_enable = x.m_steering_angle_enable;

                    m_steering_angle = x.m_steering_angle;

                    m_target_acceleration_enable = x.m_target_acceleration_enable;

                    m_target_acceleration = x.m_target_acceleration;

                    m_indicator_left_enable = x.m_indicator_left_enable;

                    m_indicator_left = x.m_indicator_left;

                    m_indicator_right_enable = x.m_indicator_right_enable;

                    m_indicator_right = x.m_indicator_right;

                    m_gear_position_enable = x.m_gear_position_enable;

                    m_gear_position = x.m_gear_position;

                    m_ebrake_status_enable = x.m_ebrake_status_enable;

                    m_ebrake_status = x.m_ebrake_status;

                    m_remote_drive_ready = x.m_remote_drive_ready;

                    m_remote_drive_takeover_request = x.m_remote_drive_takeover_request;

                    m_timestamp = x.m_timestamp;

                    m_ack_timestamp_ns = x.m_ack_timestamp_ns;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VehicleAck that will be copied.
     */
    eProsima_user_DllExport VehicleAck(
            VehicleAck&& x) noexcept
    {
        m_sequence_id = x.m_sequence_id;
        m_status = std::move(x.m_status);
        m_steering_angle_enable = x.m_steering_angle_enable;
        m_steering_angle = x.m_steering_angle;
        m_target_acceleration_enable = x.m_target_acceleration_enable;
        m_target_acceleration = x.m_target_acceleration;
        m_indicator_left_enable = x.m_indicator_left_enable;
        m_indicator_left = x.m_indicator_left;
        m_indicator_right_enable = x.m_indicator_right_enable;
        m_indicator_right = x.m_indicator_right;
        m_gear_position_enable = x.m_gear_position_enable;
        m_gear_position = x.m_gear_position;
        m_ebrake_status_enable = x.m_ebrake_status_enable;
        m_ebrake_status = x.m_ebrake_status;
        m_remote_drive_ready = x.m_remote_drive_ready;
        m_remote_drive_takeover_request = x.m_remote_drive_takeover_request;
        m_timestamp = x.m_timestamp;
        m_ack_timestamp_ns = x.m_ack_timestamp_ns;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VehicleAck that will be copied.
     */
    eProsima_user_DllExport VehicleAck& operator =(
            const VehicleAck& x)
    {

                    m_sequence_id = x.m_sequence_id;

                    m_status = x.m_status;

                    m_steering_angle_enable = x.m_steering_angle_enable;

                    m_steering_angle = x.m_steering_angle;

                    m_target_acceleration_enable = x.m_target_acceleration_enable;

                    m_target_acceleration = x.m_target_acceleration;

                    m_indicator_left_enable = x.m_indicator_left_enable;

                    m_indicator_left = x.m_indicator_left;

                    m_indicator_right_enable = x.m_indicator_right_enable;

                    m_indicator_right = x.m_indicator_right;

                    m_gear_position_enable = x.m_gear_position_enable;

                    m_gear_position = x.m_gear_position;

                    m_ebrake_status_enable = x.m_ebrake_status_enable;

                    m_ebrake_status = x.m_ebrake_status;

                    m_remote_drive_ready = x.m_remote_drive_ready;

                    m_remote_drive_takeover_request = x.m_remote_drive_takeover_request;

                    m_timestamp = x.m_timestamp;

                    m_ack_timestamp_ns = x.m_ack_timestamp_ns;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VehicleAck that will be copied.
     */
    eProsima_user_DllExport VehicleAck& operator =(
            VehicleAck&& x) noexcept
    {

        m_sequence_id = x.m_sequence_id;
        m_status = std::move(x.m_status);
        m_steering_angle_enable = x.m_steering_angle_enable;
        m_steering_angle = x.m_steering_angle;
        m_target_acceleration_enable = x.m_target_acceleration_enable;
        m_target_acceleration = x.m_target_acceleration;
        m_indicator_left_enable = x.m_indicator_left_enable;
        m_indicator_left = x.m_indicator_left;
        m_indicator_right_enable = x.m_indicator_right_enable;
        m_indicator_right = x.m_indicator_right;
        m_gear_position_enable = x.m_gear_position_enable;
        m_gear_position = x.m_gear_position;
        m_ebrake_status_enable = x.m_ebrake_status_enable;
        m_ebrake_status = x.m_ebrake_status;
        m_remote_drive_ready = x.m_remote_drive_ready;
        m_remote_drive_takeover_request = x.m_remote_drive_takeover_request;
        m_timestamp = x.m_timestamp;
        m_ack_timestamp_ns = x.m_ack_timestamp_ns;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x VehicleAck object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const VehicleAck& x) const
    {
        return (m_sequence_id == x.m_sequence_id &&
           m_status == x.m_status &&
           m_steering_angle_enable == x.m_steering_angle_enable &&
           m_steering_angle == x.m_steering_angle &&
           m_target_acceleration_enable == x.m_target_acceleration_enable &&
           m_target_acceleration == x.m_target_acceleration &&
           m_indicator_left_enable == x.m_indicator_left_enable &&
           m_indicator_left == x.m_indicator_left &&
           m_indicator_right_enable == x.m_indicator_right_enable &&
           m_indicator_right == x.m_indicator_right &&
           m_gear_position_enable == x.m_gear_position_enable &&
           m_gear_position == x.m_gear_position &&
           m_ebrake_status_enable == x.m_ebrake_status_enable &&
           m_ebrake_status == x.m_ebrake_status &&
           m_remote_drive_ready == x.m_remote_drive_ready &&
           m_remote_drive_takeover_request == x.m_remote_drive_takeover_request &&
           m_timestamp == x.m_timestamp &&
           m_ack_timestamp_ns == x.m_ack_timestamp_ns);
    }

    /*!
     * @brief Comparison operator.
     * @param x VehicleAck object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const VehicleAck& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member sequence_id
     * @param _sequence_id New value for member sequence_id
     */
    eProsima_user_DllExport void sequence_id(
            int64_t _sequence_id)
    {
        m_sequence_id = _sequence_id;
    }

    /*!
     * @brief This function returns the value of member sequence_id
     * @return Value of member sequence_id
     */
    eProsima_user_DllExport int64_t sequence_id() const
    {
        return m_sequence_id;
    }

    /*!
     * @brief This function returns a reference to member sequence_id
     * @return Reference to member sequence_id
     */
    eProsima_user_DllExport int64_t& sequence_id()
    {
        return m_sequence_id;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }


    /*!
     * @brief This function sets a value in member steering_angle_enable
     * @param _steering_angle_enable New value for member steering_angle_enable
     */
    eProsima_user_DllExport void steering_angle_enable(
            bool _steering_angle_enable)
    {
        m_steering_angle_enable = _steering_angle_enable;
    }

    /*!
     * @brief This function returns the value of member steering_angle_enable
     * @return Value of member steering_angle_enable
     */
    eProsima_user_DllExport bool steering_angle_enable() const
    {
        return m_steering_angle_enable;
    }

    /*!
     * @brief This function returns a reference to member steering_angle_enable
     * @return Reference to member steering_angle_enable
     */
    eProsima_user_DllExport bool& steering_angle_enable()
    {
        return m_steering_angle_enable;
    }


    /*!
     * @brief This function sets a value in member steering_angle
     * @param _steering_angle New value for member steering_angle
     */
    eProsima_user_DllExport void steering_angle(
            float _steering_angle)
    {
        m_steering_angle = _steering_angle;
    }

    /*!
     * @brief This function returns the value of member steering_angle
     * @return Value of member steering_angle
     */
    eProsima_user_DllExport float steering_angle() const
    {
        return m_steering_angle;
    }

    /*!
     * @brief This function returns a reference to member steering_angle
     * @return Reference to member steering_angle
     */
    eProsima_user_DllExport float& steering_angle()
    {
        return m_steering_angle;
    }


    /*!
     * @brief This function sets a value in member target_acceleration_enable
     * @param _target_acceleration_enable New value for member target_acceleration_enable
     */
    eProsima_user_DllExport void target_acceleration_enable(
            bool _target_acceleration_enable)
    {
        m_target_acceleration_enable = _target_acceleration_enable;
    }

    /*!
     * @brief This function returns the value of member target_acceleration_enable
     * @return Value of member target_acceleration_enable
     */
    eProsima_user_DllExport bool target_acceleration_enable() const
    {
        return m_target_acceleration_enable;
    }

    /*!
     * @brief This function returns a reference to member target_acceleration_enable
     * @return Reference to member target_acceleration_enable
     */
    eProsima_user_DllExport bool& target_acceleration_enable()
    {
        return m_target_acceleration_enable;
    }


    /*!
     * @brief This function sets a value in member target_acceleration
     * @param _target_acceleration New value for member target_acceleration
     */
    eProsima_user_DllExport void target_acceleration(
            float _target_acceleration)
    {
        m_target_acceleration = _target_acceleration;
    }

    /*!
     * @brief This function returns the value of member target_acceleration
     * @return Value of member target_acceleration
     */
    eProsima_user_DllExport float target_acceleration() const
    {
        return m_target_acceleration;
    }

    /*!
     * @brief This function returns a reference to member target_acceleration
     * @return Reference to member target_acceleration
     */
    eProsima_user_DllExport float& target_acceleration()
    {
        return m_target_acceleration;
    }


    /*!
     * @brief This function sets a value in member indicator_left_enable
     * @param _indicator_left_enable New value for member indicator_left_enable
     */
    eProsima_user_DllExport void indicator_left_enable(
            bool _indicator_left_enable)
    {
        m_indicator_left_enable = _indicator_left_enable;
    }

    /*!
     * @brief This function returns the value of member indicator_left_enable
     * @return Value of member indicator_left_enable
     */
    eProsima_user_DllExport bool indicator_left_enable() const
    {
        return m_indicator_left_enable;
    }

    /*!
     * @brief This function returns a reference to member indicator_left_enable
     * @return Reference to member indicator_left_enable
     */
    eProsima_user_DllExport bool& indicator_left_enable()
    {
        return m_indicator_left_enable;
    }


    /*!
     * @brief This function sets a value in member indicator_left
     * @param _indicator_left New value for member indicator_left
     */
    eProsima_user_DllExport void indicator_left(
            bool _indicator_left)
    {
        m_indicator_left = _indicator_left;
    }

    /*!
     * @brief This function returns the value of member indicator_left
     * @return Value of member indicator_left
     */
    eProsima_user_DllExport bool indicator_left() const
    {
        return m_indicator_left;
    }

    /*!
     * @brief This function returns a reference to member indicator_left
     * @return Reference to member indicator_left
     */
    eProsima_user_DllExport bool& indicator_left()
    {
        return m_indicator_left;
    }


    /*!
     * @brief This function sets a value in member indicator_right_enable
     * @param _indicator_right_enable New value for member indicator_right_enable
     */
    eProsima_user_DllExport void indicator_right_enable(
            bool _indicator_right_enable)
    {
        m_indicator_right_enable = _indicator_right_enable;
    }

    /*!
     * @brief This function returns the value of member indicator_right_enable
     * @return Value of member indicator_right_enable
     */
    eProsima_user_DllExport bool indicator_right_enable() const
    {
        return m_indicator_right_enable;
    }

    /*!
     * @brief This function returns a reference to member indicator_right_enable
     * @return Reference to member indicator_right_enable
     */
    eProsima_user_DllExport bool& indicator_right_enable()
    {
        return m_indicator_right_enable;
    }


    /*!
     * @brief This function sets a value in member indicator_right
     * @param _indicator_right New value for member indicator_right
     */
    eProsima_user_DllExport void indicator_right(
            bool _indicator_right)
    {
        m_indicator_right = _indicator_right;
    }

    /*!
     * @brief This function returns the value of member indicator_right
     * @return Value of member indicator_right
     */
    eProsima_user_DllExport bool indicator_right() const
    {
        return m_indicator_right;
    }

    /*!
     * @brief This function returns a reference to member indicator_right
     * @return Reference to member indicator_right
     */
    eProsima_user_DllExport bool& indicator_right()
    {
        return m_indicator_right;
    }


    /*!
     * @brief This function sets a value in member gear_position_enable
     * @param _gear_position_enable New value for member gear_position_enable
     */
    eProsima_user_DllExport void gear_position_enable(
            bool _gear_position_enable)
    {
        m_gear_position_enable = _gear_position_enable;
    }

    /*!
     * @brief This function returns the value of member gear_position_enable
     * @return Value of member gear_position_enable
     */
    eProsima_user_DllExport bool gear_position_enable() const
    {
        return m_gear_position_enable;
    }

    /*!
     * @brief This function returns a reference to member gear_position_enable
     * @return Reference to member gear_position_enable
     */
    eProsima_user_DllExport bool& gear_position_enable()
    {
        return m_gear_position_enable;
    }


    /*!
     * @brief This function sets a value in member gear_position
     * @param _gear_position New value for member gear_position
     */
    eProsima_user_DllExport void gear_position(
            int32_t _gear_position)
    {
        m_gear_position = _gear_position;
    }

    /*!
     * @brief This function returns the value of member gear_position
     * @return Value of member gear_position
     */
    eProsima_user_DllExport int32_t gear_position() const
    {
        return m_gear_position;
    }

    /*!
     * @brief This function returns a reference to member gear_position
     * @return Reference to member gear_position
     */
    eProsima_user_DllExport int32_t& gear_position()
    {
        return m_gear_position;
    }


    /*!
     * @brief This function sets a value in member ebrake_status_enable
     * @param _ebrake_status_enable New value for member ebrake_status_enable
     */
    eProsima_user_DllExport void ebrake_status_enable(
            bool _ebrake_status_enable)
    {
        m_ebrake_status_enable = _ebrake_status_enable;
    }

    /*!
     * @brief This function returns the value of member ebrake_status_enable
     * @return Value of member ebrake_status_enable
     */
    eProsima_user_DllExport bool ebrake_status_enable() const
    {
        return m_ebrake_status_enable;
    }

    /*!
     * @brief This function returns a reference to member ebrake_status_enable
     * @return Reference to member ebrake_status_enable
     */
    eProsima_user_DllExport bool& ebrake_status_enable()
    {
        return m_ebrake_status_enable;
    }


    /*!
     * @brief This function sets a value in member ebrake_status
     * @param _ebrake_status New value for member ebrake_status
     */
    eProsima_user_DllExport void ebrake_status(
            int32_t _ebrake_status)
    {
        m_ebrake_status = _ebrake_status;
    }

    /*!
     * @brief This function returns the value of member ebrake_status
     * @return Value of member ebrake_status
     */
    eProsima_user_DllExport int32_t ebrake_status() const
    {
        return m_ebrake_status;
    }

    /*!
     * @brief This function returns a reference to member ebrake_status
     * @return Reference to member ebrake_status
     */
    eProsima_user_DllExport int32_t& ebrake_status()
    {
        return m_ebrake_status;
    }


    /*!
     * @brief This function sets a value in member remote_drive_ready
     * @param _remote_drive_ready New value for member remote_drive_ready
     */
    eProsima_user_DllExport void remote_drive_ready(
            bool _remote_drive_ready)
    {
        m_remote_drive_ready = _remote_drive_ready;
    }

    /*!
     * @brief This function returns the value of member remote_drive_ready
     * @return Value of member remote_drive_ready
     */
    eProsima_user_DllExport bool remote_drive_ready() const
    {
        return m_remote_drive_ready;
    }

    /*!
     * @brief This function returns a reference to member remote_drive_ready
     * @return Reference to member remote_drive_ready
     */
    eProsima_user_DllExport bool& remote_drive_ready()
    {
        return m_remote_drive_ready;
    }


    /*!
     * @brief This function sets a value in member remote_drive_takeover_request
     * @param _remote_drive_takeover_request New value for member remote_drive_takeover_request
     */
    eProsima_user_DllExport void remote_drive_takeover_request(
            bool _remote_drive_takeover_request)
    {
        m_remote_drive_takeover_request = _remote_drive_takeover_request;
    }

    /*!
     * @brief This function returns the value of member remote_drive_takeover_request
     * @return Value of member remote_drive_takeover_request
     */
    eProsima_user_DllExport bool remote_drive_takeover_request() const
    {
        return m_remote_drive_takeover_request;
    }

    /*!
     * @brief This function returns a reference to member remote_drive_takeover_request
     * @return Reference to member remote_drive_takeover_request
     */
    eProsima_user_DllExport bool& remote_drive_takeover_request()
    {
        return m_remote_drive_takeover_request;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            int64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport int64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport int64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function sets a value in member ack_timestamp_ns
     * @param _ack_timestamp_ns New value for member ack_timestamp_ns
     */
    eProsima_user_DllExport void ack_timestamp_ns(
            int64_t _ack_timestamp_ns)
    {
        m_ack_timestamp_ns = _ack_timestamp_ns;
    }

    /*!
     * @brief This function returns the value of member ack_timestamp_ns
     * @return Value of member ack_timestamp_ns
     */
    eProsima_user_DllExport int64_t ack_timestamp_ns() const
    {
        return m_ack_timestamp_ns;
    }

    /*!
     * @brief This function returns a reference to member ack_timestamp_ns
     * @return Reference to member ack_timestamp_ns
     */
    eProsima_user_DllExport int64_t& ack_timestamp_ns()
    {
        return m_ack_timestamp_ns;
    }



private:

    int64_t m_sequence_id{0};
    std::string m_status;
    bool m_steering_angle_enable{false};
    float m_steering_angle{0.0};
    bool m_target_acceleration_enable{false};
    float m_target_acceleration{0.0};
    bool m_indicator_left_enable{false};
    bool m_indicator_left{false};
    bool m_indicator_right_enable{false};
    bool m_indicator_right{false};
    bool m_gear_position_enable{false};
    int32_t m_gear_position{0};
    bool m_ebrake_status_enable{false};
    int32_t m_ebrake_status{0};
    bool m_remote_drive_ready{false};
    bool m_remote_drive_takeover_request{false};
    int64_t m_timestamp{0};
    int64_t m_ack_timestamp_ns{0};

};

#endif // _FAST_DDS_GENERATED_VEHICLEACK_HPP_


